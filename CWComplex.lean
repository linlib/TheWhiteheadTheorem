/-
Copyright (c) 2024 Elliot Dean Young and Jiazhen Xia. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jiazhen Xia, Elliot Dean Young
-/
import Mathlib.Topology.CWComplex
import Mathlib.Topology.Homotopy.HomotopyGroup

/-!
# CW-complexes

This file defines (relative) CW-complexes.

## Main definitions

* `RelativeCWComplex`: A relative CW-complex is the colimit of an expanding sequence of subspaces
  `sk i` (called the $(i-1)$-skeleton) for `i ‚â• 0`, where `sk 0` (i.e., the $(-1)$-skeleton) is an
  arbitrary topological space, and each `sk (n + 1)` (i.e., the $n$-skeleton) is obtained from
  `sk n` (i.e., the $(n-1)$-skeleton) by attaching `n`-disks.

* `CWComplex`: A CW-complex is a relative CW-complex whose `sk 0` (i.e., $(-1)$-skeleton) is empty.

## References

* [R. Fritsch and R. Piccinini, *Cellular Structures in Topology*][fritsch-piccinini1990]
* The definition of CW-complexes follows David W√§rn's suggestion on
  [Zulip](https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Do.20we.20have.20CW.20complexes.3F/near/231769080).
-/

section GluingLemma

-- #check ContinuousMap.liftCover -- gluing lemma for an open cover

variable {Œ± Œ≤ : Type*} [TopologicalSpace Œ±] [TopologicalSpace Œ≤]

variable {Œπ : Type*} [Finite Œπ] (S : Œπ ‚Üí Set Œ±) (œÜ : ‚àÄ i : Œπ, C(S i, Œ≤))
(hœÜ : ‚àÄ (i j) (x : Œ±) (hxi : x ‚àà S i) (hxj : x ‚àà S j), œÜ i ‚ü®x, hxi‚ü© = œÜ j ‚ü®x, hxj‚ü©)
(hS_cover : ‚àÄ x : Œ±, ‚àÉ i, x ‚àà S i) (hS_closed : ‚àÄ i, IsClosed (S i))

noncomputable def liftCoverClosed : C(Œ±, Œ≤) :=
  have H : ‚ãÉ i, S i = Set.univ := Set.iUnion_eq_univ_iff.2 hS_cover
  let Œ¶ := Set.liftCover S (fun i ‚Ü¶ œÜ i) hœÜ H
  ContinuousMap.mk Œ¶ <| continuous_iff_isClosed.mpr fun Y hY ‚Ü¶ by
    have : ‚àÄ i, œÜ i ‚Åª¬π' Y = S i ‚à© Œ¶ ‚Åª¬π' Y := fun i ‚Ü¶ by
      ext x
      simp only [Set.mem_image, Set.mem_preimage, Subtype.exists, exists_and_right, exists_eq_right,
        Set.mem_inter_iff]
      conv => lhs; rhs; ext hxi; arg 2; equals Œ¶ x => exact Eq.symm (Set.liftCover_of_mem hxi)
      tauto
    have : Œ¶ ‚Åª¬π' Y = ‚ãÉ i, Subtype.val '' (œÜ i ‚Åª¬π' Y) := by
      conv_rhs => ext x; arg 1; ext i; rw [this]
      conv_rhs => ext x; rw [‚Üê Set.iUnion_inter, H, Set.univ_inter]
    rw [this]
    exact isClosed_iUnion_of_finite fun i ‚Ü¶
      IsClosed.trans (IsClosed.preimage (œÜ i).continuous hY) (hS_closed i)

theorem liftCoverClosed_coe {i : Œπ} (x : S i) :
    liftCoverClosed S œÜ hœÜ hS_cover hS_closed x = œÜ i x := by
  rw [liftCoverClosed, ContinuousMap.coe_mk, Set.liftCover_coe _]

theorem liftCoverClosed_coe' {i : Œπ} (x : Œ±) (hx : x ‚àà S i) :
    liftCoverClosed S œÜ hœÜ hS_cover hS_closed x = œÜ i ‚ü®x, hx‚ü© := by
  rw [‚Üê liftCoverClosed_coe]

end GluingLemma


namespace RelativeCWComplex

section HEP

open unitInterval TopCat

abbrev Jar (n : ‚Ñ§) := ùîª (n + 1) √ó I
def jarMid (n : ‚Ñ§) := {‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, ‚ü®y, _‚ü© ‚ü© : Jar n | ‚Äñx‚Äñ ‚â§ 1 - y / 2}
def jarRim (n : ‚Ñ§) := {‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, ‚ü®y, _‚ü© ‚ü© : Jar n | ‚Äñx‚Äñ ‚â• 1 - y / 2}

def jarClosedCover (n : ‚Ñ§) : Fin 2 ‚Üí Set (Jar n) := ![jarMid n, jarRim n]

lemma continuous_sub_div_two : Continuous fun (y : ‚Ñù) ‚Ü¶ 1 - y / 2 :=
  (continuous_sub_left _).comp <| continuous_mul_right _

lemma isClosed_jarMid (n : ‚Ñ§) : IsClosed (jarMid n) :=
  continuous_iff_isClosed.mp (continuous_uLift_down.subtype_val.norm.prodMap continuous_id)
    {‚ü®x, y, _‚ü© : ‚Ñù √ó I | x ‚â§ 1 - y / 2} <| isClosed_le continuous_fst <|
    continuous_sub_div_two.comp <| continuous_subtype_val.comp continuous_snd

lemma isClosed_jarRim (n : ‚Ñ§) : IsClosed (jarRim n) :=
  continuous_iff_isClosed.mp (continuous_uLift_down.subtype_val.norm.prodMap continuous_id)
    {‚ü®x, y, _‚ü© : ‚Ñù √ó I | x ‚â• 1 - y / 2} <| isClosed_le
    (continuous_sub_div_two.comp <| continuous_subtype_val.comp continuous_snd) continuous_fst

noncomputable def jarMidProjToFun (n : ‚Ñ§) : jarMid.{u} n ‚Üí disk.{u} (n + 1) := fun p ‚Ü¶ ‚ü®{
  -- Note: pattern matching is done inside `toFun` to make `Continuous.subtype_mk` work
  val := match p with
    | ‚ü®‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, ‚ü®y, _‚ü© ‚ü©, _‚ü© => (2 / (2 - y)) ‚Ä¢ x,
  property := by
    obtain ‚ü®‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, ‚ü®y, _, _‚ü© ‚ü©, hxy‚ü© := p
    dsimp only [Int.ofNat_eq_coe, Set.coe_setOf, Set.mem_setOf_eq]
    rw [Metric.mem_closedBall]
    rw [dist_zero_right, norm_smul, norm_div, RCLike.norm_ofNat, Real.norm_eq_abs]
    have : 0 < |2 - y| := lt_of_le_of_ne (abs_nonneg _) (abs_ne_zero.mpr (by linarith)).symm
    rw [‚Üê le_div_iff‚ÇÄ' (div_pos (by norm_num) this), one_div, inv_div]
    nth_rw 2 [‚Üê (@abs_eq_self ‚Ñù _ 2).mpr (by norm_num)]
    rw [‚Üê abs_div, sub_div, div_self (by norm_num), le_abs]
    exact Or.inl hxy }‚ü©

lemma continuous_jarMidProjToFun (n : ‚Ñ§) : Continuous (jarMidProjToFun.{u} n) := by
  refine continuous_uLift_up.comp ?_
  refine Continuous.subtype_mk ?_ _
  exact continuous_smul.comp <| Continuous.prod_mk
    (continuous_const.div ((continuous_sub_left _).comp <| continuous_subtype_val.comp <|
      continuous_snd.comp <| continuous_subtype_val) fun ‚ü®‚ü® _, ‚ü®y, _, _‚ü© ‚ü©, _‚ü© ‚Ü¶ by
        dsimp only [Function.comp_apply, ne_eq]; linarith)
    (continuous_subtype_val.comp <| continuous_uLift_down.comp <| continuous_fst.comp <|
      continuous_subtype_val)

noncomputable def jarMidProj (n : ‚Ñ§) : C(jarMid n, ùîª (n + 1)) :=
  ‚ü®jarMidProjToFun n, continuous_jarMidProjToFun n‚ü©

lemma jarRim_fst_ne_zero (n : ‚Ñ§) : ‚àÄ p : jarRim n, ‚Äñp.val.fst.down.val‚Äñ ‚â† 0 :=
  fun ‚ü®‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, ‚ü®y, _, _‚ü© ‚ü©, hxy‚ü© ‚Ü¶ by
    conv => lhs; arg 1; dsimp
    change ‚Äñx‚Äñ ‚â• 1 - y / 2 at hxy
    linarith

noncomputable def jarRimProjFstToFun (n : ‚Ñ§) : jarRim.{u} n ‚Üí sphere.{u} n := fun p ‚Ü¶ ‚ü®{
  val := match p with
    | ‚ü®‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, _ ‚ü©, _‚ü© => (1 / ‚Äñx‚Äñ) ‚Ä¢ x
  property := by
    obtain ‚ü®‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, ‚ü®y, yl, yr‚ü© ‚ü©, hxy‚ü© := p
    simp only [one_div, mem_sphere_iff_norm, sub_zero, norm_smul, norm_inv, norm_norm]
    change ‚Äñx‚Äñ ‚â• 1 - y / 2 at hxy
    exact inv_mul_cancel‚ÇÄ (by linarith) }‚ü©

lemma continuous_jarRimProjFstToFun (n : ‚Ñ§) : Continuous (jarRimProjFstToFun n) := by
  refine continuous_uLift_up.comp ?_
  refine Continuous.subtype_mk ?_ _
  exact continuous_smul.comp <| Continuous.prod_mk
    (Continuous.div continuous_const (continuous_norm.comp <| continuous_subtype_val.comp <|
      continuous_uLift_down.comp <| continuous_fst.comp <| continuous_subtype_val) <|
        jarRim_fst_ne_zero n)
    (continuous_subtype_val.comp <| continuous_uLift_down.comp <| continuous_fst.comp <|
      continuous_subtype_val)

noncomputable def jarRimProjFst (n : ‚Ñ§) : C(jarRim n, ùïä n) :=
  ‚ü®jarRimProjFstToFun n, continuous_jarRimProjFstToFun n‚ü©

noncomputable def jarRimProjSndToFun (n : ‚Ñ§) : jarRim n ‚Üí I := fun p ‚Ü¶ {
  val := match p with
    | ‚ü®‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, ‚ü®y, _‚ü© ‚ü©, _‚ü© => (y - 2) / ‚Äñx‚Äñ + 2
  property := by
    obtain ‚ü®‚ü® ‚ü®‚ü®x, hx‚ü©‚ü©, ‚ü®y, _, _‚ü© ‚ü©, hxy‚ü© := p
    simp only [Set.mem_Icc]
    rw [Metric.mem_closedBall, dist_zero_right] at hx
    change ‚Äñx‚Äñ ‚â• 1 - y / 2 at hxy
    have : ‚Äñx‚Äñ > 0 := by linarith
    constructor
    all_goals rw [‚Üê add_le_add_iff_right (-2)]
    ¬∑ rw [‚Üê neg_le_neg_iff, add_neg_cancel_right, zero_add, neg_neg]
      rw [‚Üê neg_div, neg_sub, div_le_iff‚ÇÄ (by assumption)]; linarith
    ¬∑ rw [add_assoc, add_neg_cancel, add_zero, div_le_iff‚ÇÄ (by assumption)]; linarith}

lemma continuous_jarRimProjSndToFun (n : ‚Ñ§) : Continuous (jarRimProjSndToFun n) := by
  refine Continuous.subtype_mk ?_ _
  exact (continuous_add_right _).comp <| Continuous.div
    ((continuous_sub_right _).comp <| continuous_subtype_val.comp <|
      continuous_snd.comp <| continuous_subtype_val)
    (continuous_norm.comp <| continuous_subtype_val.comp <| continuous_uLift_down.comp <|
      continuous_fst.comp <| continuous_subtype_val) <| jarRim_fst_ne_zero n

noncomputable def jarRimProjSnd (n : ‚Ñ§) : C(jarRim n, I) :=
  ‚ü®jarRimProjSndToFun n, continuous_jarRimProjSndToFun n‚ü©

noncomputable def jarRimProj (n : ‚Ñ§) : C(jarRim n, (ùïä n) √ó I) :=
  ContinuousMap.prodMk (jarRimProjFst n) (jarRimProjSnd n)

noncomputable def jarProj (n : ‚Ñ§) {Y : Type} [TopologicalSpace Y]
    (f : C(ùîª (n + 1), Y)) (H: C((ùïä n) √ó I, Y)) : ‚àÄ i, C(jarClosedCover n i, Y) :=
  Fin.cons (f.comp (jarMidProj n)) <| Fin.cons (H.comp (jarRimProj n)) finZeroElim

lemma jarProj_compatible (n : ‚Ñ§) {Y : Type} [TopologicalSpace Y]
    (f : C(ùîª (n + 1), Y)) (H: C((ùïä n) √ó I, Y)) (hf: f ‚àò sphereInclusion n = H ‚àò (¬∑, 0)) :
    ‚àÄ (p : Jar n) (hp0 : p ‚àà jarClosedCover n 0) (hp1 : p ‚àà jarClosedCover n 1),
    jarProj n f H 0 ‚ü®p, hp0‚ü© = jarProj n f H 1 ‚ü®p, hp1‚ü© :=
  fun ‚ü®‚ü®‚ü®x, hx‚ü©‚ü©, ‚ü®y, hy0, hy1‚ü©‚ü© hp0 hp1 ‚Ü¶ by
    change f (jarMidProj n _) = H (jarRimProj n _)
    change ‚Äñx‚Äñ ‚â§ 1 - y / 2 at hp0
    change ‚Äñx‚Äñ ‚â• 1 - y / 2 at hp1
    have : ‚Äñx‚Äñ = 1 - y / 2 := by linarith
    let q : ùïä n := ‚ü® (2 / (2 - y)) ‚Ä¢ x, by
      simp only [mem_sphere_iff_norm, sub_zero, norm_smul, norm_div, RCLike.norm_ofNat,
        Real.norm_eq_abs]
      rw [this, abs_of_pos (by linarith), div_mul_eq_mul_div, div_eq_iff (by linarith)]
      rw [mul_sub, mul_one, ‚Üê mul_comm_div, div_self (by norm_num), one_mul, one_mul] ‚ü©
    conv in jarMidProj n _ => equals sphereInclusion n q =>
      unfold sphereInclusion jarMidProj jarMidProjToFun
      simp only [Fin.isValue, ContinuousMap.coe_mk]
      rw [‚Üê ContinuousMap.toFun_eq_coe]
    conv in jarRimProj n _ => equals (q, 0) =>
      unfold jarRimProj jarRimProjFst jarRimProjFstToFun jarRimProjSnd jarRimProjSndToFun
      dsimp only [Int.ofNat_eq_coe, ContinuousMap.prod_eval, ContinuousMap.coe_mk]
      conv => rhs; change (q, ‚ü®0, by norm_num, by norm_num‚ü©)
      congr 2
      ¬∑ congr 2
        rw [this, div_eq_div_iff (by linarith) (by linarith)]
        rw [one_mul, mul_sub, mul_one, ‚Üê mul_comm_div, div_self (by norm_num), one_mul]
      ¬∑ rw [this, ‚Üê eq_sub_iff_add_eq, zero_sub, div_eq_iff (by linarith), mul_sub, mul_one]
        rw [mul_div, mul_div_right_comm, neg_div_self (by norm_num), ‚Üê neg_eq_neg_one_mul]
        rw [sub_neg_eq_add, add_comm]; rfl
    change (f ‚àò sphereInclusion n) q = (H ‚àò (¬∑, 0)) q
    rw [hf]

lemma jarProj_compatible' (n : ‚Ñ§) {Y : Type} [TopologicalSpace Y]
    (f : C(ùîª (n + 1), Y)) (H: C((ùïä n) √ó I, Y)) (hf: f ‚àò sphereInclusion n = H ‚àò (¬∑, 0)) :
    ‚àÄ (i j) (p : Jar n) (hpi : p ‚àà jarClosedCover n i) (hpj : p ‚àà jarClosedCover n j),
    jarProj n f H i ‚ü®p, hpi‚ü© = jarProj n f H j ‚ü®p, hpj‚ü© := by
  intro ‚ü®i, hi‚ü© ‚ü®j, hj‚ü© p hpi hpj
  interval_cases i <;> (interval_cases j <;> (try simp only [Fin.zero_eta, Fin.mk_one]))
  ¬∑ exact jarProj_compatible n f H hf p hpi hpj
  ¬∑ exact Eq.symm <| jarProj_compatible n f H hf p hpj hpi

lemma jarClosedCover_is_cover (n : ‚Ñ§) : ‚àÄ (p : Jar n), ‚àÉ i, p ‚àà jarClosedCover n i :=
  fun ‚ü®‚ü®x, _‚ü©, ‚ü®y, _‚ü©‚ü© ‚Ü¶ by
    by_cases h : ‚Äñx‚Äñ ‚â§ 1 - y / 2
    ¬∑ use 0; exact h
    ¬∑ use 1; change ‚Äñx‚Äñ ‚â• 1 - y / 2; linarith

lemma jarClosedCover_isClosed (n : ‚Ñ§) : ‚àÄ i, IsClosed (jarClosedCover n i) := fun ‚ü®i, hi‚ü© ‚Ü¶ by
  interval_cases i
  exact isClosed_jarMid n
  exact isClosed_jarRim n

noncomputable def jarHomotopyExtension (n : ‚Ñ§) {Y : Type} [TopologicalSpace Y]
    (f : C(ùîª (n + 1), Y)) (H: C((ùïä n) √ó I, Y))
    (hf: f ‚àò sphereInclusion n = H ‚àò (¬∑, 0)) : C((Jar n), Y) :=
  liftCoverClosed (jarClosedCover n) (jarProj n f H) (jarProj_compatible' n f H hf)
    (jarClosedCover_is_cover n) (jarClosedCover_isClosed n)

-- The triangle involving the bottom (i.e., `ùîª (n + 1)`) of the jar commutes.
lemma jarHomotopyExtension_bottom_commutes (n : ‚Ñ§) {Y : Type} [TopologicalSpace Y]
    (f : C(ùîª (n + 1), Y)) (H: C((ùïä n) √ó I, Y))
    (hf: f ‚àò sphereInclusion n = H ‚àò (¬∑, 0)) :
    ‚áëf = jarHomotopyExtension n f H hf ‚àò (¬∑, 0) := by
  ext p
  change _ = jarHomotopyExtension n f H hf (p, 0)
  have hp : (p, 0) ‚àà jarClosedCover n 0 := by
    obtain ‚ü®x, hx‚ü© := p
    change ‚Äñx‚Äñ ‚â§ 1 - 0 / 2
    rw [zero_div, sub_zero]
    exact mem_closedBall_zero_iff.mp hx
  conv_rhs => equals (jarProj n f H 0) ‚ü®(p, 0), hp‚ü© => apply liftCoverClosed_coe'
  simp only [Int.ofNat_eq_coe, jarProj, TopCat.coe_of, Fin.succ_zero_eq_one, Fin.cons_zero,
    ContinuousMap.comp_apply]
  congr
  change p = jarMidProjToFun n ‚ü®(p, 0), hp‚ü©
  obtain ‚ü®x, hx‚ü© := p
  simp only [Int.ofNat_eq_coe, jarMidProjToFun, sub_zero, ne_eq, OfNat.ofNat_ne_zero,
    not_false_eq_true, div_self, one_smul]

-- The triangle involving the wall (i.e., `ùïä n √ó I`) of the jar commutes.
lemma jarHomotopyExtension_wall_commutes (n : ‚Ñ§) {Y : Type} [TopologicalSpace Y]
    (f : C(ùîª (n + 1), Y)) (H: C((ùïä n) √ó I, Y))
    (hf: f ‚àò sphereInclusion n = H ‚àò (¬∑, 0)) :
    ‚áëH = jarHomotopyExtension n f H hf ‚àò Prod.map (sphereInclusion n) id := by
  ext ‚ü®‚ü®x, hx‚ü©, ‚ü®y, hy‚ü©‚ü©
  let q := (sphereInclusion n).toFun ‚ü®x, hx‚ü©
  change _ = jarHomotopyExtension n f H hf ‚ü®q, ‚ü®y, hy‚ü©‚ü©
  have hq : ‚ü®q, ‚ü®y, hy‚ü©‚ü© ‚àà jarClosedCover n 1 := by
    change ‚Äñx‚Äñ ‚â• 1 - y / 2
    rw [mem_sphere_zero_iff_norm.mp hx]
    obtain ‚ü®_, _‚ü© := hy
    linarith
  conv_rhs => equals (jarProj n f H 1) ‚ü®‚ü®q, ‚ü®y, hy‚ü©‚ü©, hq‚ü© => apply liftCoverClosed_coe'
  simp only [jarProj, Fin.succ_zero_eq_one, Fin.cons_one, Fin.cons_zero, ContinuousMap.comp_apply]
  congr
  ¬∑ dsimp only [jarRimProjFst, sphereInclusion, ContinuousMap.coe_mk, jarRimProjFstToFun, one_div,
      q]
    rw [mem_sphere_zero_iff_norm.mp hx, div_one, one_smul]
  ¬∑ dsimp only [sphereInclusion, q]
    rw [mem_sphere_zero_iff_norm.mp hx, div_one, sub_add_cancel]

def HomotopyExtensionProperty {A X : Type u} [TopologicalSpace A] [TopologicalSpace X]
    (i : C(A, X)) : Prop :=
  ‚àÄ {Y : Type} [TopologicalSpace Y] (f : C(X, Y)) (H : C(A √ó I, Y)), f ‚àò i = H ‚àò (¬∑, 0) ‚Üí
  ‚àÉ H' : C(X √ó I, Y), ‚áëf = ‚áëH' ‚àò (¬∑, 0) ‚àß ‚áëH = ‚áëH' ‚àò Prod.map i id

theorem hep_sphereInclusion (n : ‚Ñ§) : HomotopyExtensionProperty (sphereInclusion.{u} n) :=
  fun f H hf ‚Ü¶ ‚ü®jarHomotopyExtension n f H hf, jarHomotopyExtension_bottom_commutes n f H hf,
    jarHomotopyExtension_wall_commutes n f H hf‚ü©

end HEP

end RelativeCWComplex


noncomputable section -- change of base point (draft)

universe u

open scoped Topology TopCat

def disk (n : ‚Ñ§) : TopCat.{u} :=
  TopCat.of <| ULift <| Metric.closedBall (0 : EuclideanSpace ‚Ñù (Fin n.toNat)) 1  -- `L^2` norm

def cube (n : ‚Ñ§) : TopCat.{u} :=
  TopCat.of <| ULift <| { x : Fin n.toNat ‚Üí ‚Ñù | ‚Äñx‚Äñ ‚â§ 1 }  -- `L^‚àû` norm

set_option diagnostics true
-- example (x : EuclideanSpace ‚Ñù (Fin 2)) : ‚Ñù := if x = 0 then 1 else 2 -- failed to synthesize Decidable (x = 0)
example (x : (Fin 2) ‚Üí ‚Ñù) : ‚Ñù := if x = 0 then 1 else 2
set_option diagnostics false

#check ContinuousAt
#check Continuous.continuousAt
#check ContinuousAt.continuousWithinAt
#check continuousAt_def
#check continuousAt_const_smul_iff
#check continuousAt_update_of_ne
#check continuousAt_update_same
#check continuousAt_apply
#check continuousAt_iff_ultrafilter

#check continuousAt_congr
#check continuousAt_codRestrict_iff
#check continuousOn_iff_continuous_restrict
#check continuousWithinAt_iff_continuousAt_restrict
--#check ContinuousMap.continuous_restrict

-- #check continuousAt_of_locally_lipschitz
-- #check Metric.continuousWithinAt_iff
-- #check (inferInstance : PseudoMetricSpace (EuclideanSpace ‚Ñù (Fin 2)))
-- #check (inferInstance : PseudoMetricSpace (disk 2))  -- fail

#check continuousAt_of_tendsto_nhds
#check ContinuousAt.comp_continuousWithinAt
#check ContinuousOn.continuousAt
#check continuousOn_iff

section -- continuity of if-then-else functions

variable {X Y : Type*} [TopologicalSpace X] [TopologicalSpace Y]

lemma continuousOn_of_continuous_subspace (A : Set X) [‚àÄ x, Decidable (x ‚àà A)]
    (f : C({x // x ‚àà A}, Y)) (g : X ‚Üí Y) :
    ContinuousOn (fun x ‚Ü¶ if h : x ‚àà A then f ‚ü®x, h‚ü© else g x) A :=
  continuousOn_iff.mpr fun x hxA t ht hft ‚Ü¶ by
    simp only [hxA, ‚ÜìreduceDIte] at hft
    have := @Continuous.continuousAt _ _ _ _ _ ‚ü®x, hxA‚ü© f.continuous_toFun
    have hf := continuousAt_def.mp this t (ht.mem_nhds hft)
    rw [ContinuousMap.toFun_eq_coe, mem_nhds_iff] at hf
    obtain ‚ü®u, hu, ‚ü®v, hv, hvu‚ü©, hxu‚ü© := hf
    use v, hv
    constructor
    . rw [‚Üê hvu, Set.mem_preimage] at hxu
      exact hxu
    rintro a ‚ü®hav, haA‚ü©
    simp only [Set.mem_preimage, haA, ‚ÜìreduceDIte]
    apply hu
    rw [‚Üê hvu, Set.mem_preimage]
    exact hav

end -- continuity of if-then-else functions

section -- experiment with easier funcitons

--#check continuous_iff_continuousOn_univ
#check continuous_subtype_val
example : ContinuousOn (¬∑ + (1 : ‚Ñù)) {x | x > 0} := by
  apply continuousOn_iff_continuous_restrict.mpr
  -- unfold Set.restrict; simp only
  exact (continuous_add_right 1).comp continuous_subtype_val
def f‚ÇÅ (n : ‚Ñ§) : disk n ‚Üí cube n
  | ‚ü®x, hx‚ü© => ‚ü®x, by
      simp only [Metric.mem_closedBall, dist_zero_right] at hx
      have lip := PiLp.lipschitzWith_equiv 2 _ x 0
      simp [edist_dist] at lip
      exact lip.trans hx‚ü©
lemma continuous_f‚ÇÅ (n : ‚Ñ§) : Continuous (f‚ÇÅ n) := by
  refine continuous_uLift_up.comp ?_
  refine Continuous.subtype_mk ?_ _
  -- refine Continuous.subtype_val ?_
  exact continuous_uLift_down.subtype_val
example (n : ‚Ñ§) : ContinuousOn (f‚ÇÅ n) { ‚ü®x, _‚ü© | ¬¨‚àÄ i, x i = 0 } := by
  apply continuousOn_iff_continuous_restrict.mpr
  -- unfold Set.restrict
  exact (continuous_f‚ÇÅ n).comp continuous_subtype_val
def f‚ÇÇ (n : ‚Ñ§) : disk n ‚Üí cube n
  | ‚ü®x, hx‚ü© => ‚ü®‚Äñx‚Äñ ‚Ä¢ x, sorry‚ü©
#check Continuous.smul (Continuous.norm continuous_id) continuous_id
#check Continuous.prod_mk (Continuous.norm continuous_id) continuous_id
#check Continuous.norm continuous_id
#check Continuous.subtype_val
lemma continuous_f‚ÇÇ (n : ‚Ñ§) : Continuous (f‚ÇÇ n) := by
  refine continuous_uLift_up.comp ?_
  refine Continuous.subtype_mk ?_ _
  -- refine Continuous.smul ?_ ?_
  exact Continuous.smul (continuous_uLift_down.subtype_val.norm) continuous_uLift_down.subtype_val
def f‚ÇÉ (n : ‚Ñ§) : disk n ‚Üí cube n
  | ‚ü®x, hx‚ü© => ‚ü®‚ÄñWithLp.equiv 2 _ x‚Äñ ‚Ä¢ x, sorry‚ü©
#check PiLp.continuous_equiv 2
#check @PiLp.continuous_equiv 2 (Fin 5) (fun _ ‚Ü¶ ‚Ñù)
lemma continuous_f‚ÇÉ (n : ‚Ñ§) : Continuous (f‚ÇÉ n) := by
  refine continuous_uLift_up.comp ?_
  refine Continuous.subtype_mk ?_ _
  refine Continuous.smul ?_ ?_
  ¬∑ refine Continuous.norm ?_
    --refine (@PiLp.continuous_equiv _ _ (fun _ ‚Ü¶ ‚Ñù)).comp ?_
    exact continuous_uLift_down.subtype_val
  exact continuous_uLift_down.subtype_val
lemma continuousOn_f‚ÇÉ (n : ‚Ñ§) : ContinuousOn (f‚ÇÉ n) { ‚ü®x, _‚ü© | ¬¨‚àÄ i, x i = 0 } := by
  apply continuousOn_iff_continuous_restrict.mpr
  refine continuous_uLift_up.comp ?_
  refine Continuous.subtype_mk ?_ _
  refine Continuous.smul ?_ ?_
  ¬∑ refine Continuous.norm ?_
    -- refine (@PiLp.continuous_equiv _ _ (fun _ ‚Ü¶ ‚Ñù)).comp ?_
    exact (continuous_uLift_down.comp continuous_subtype_val).subtype_val
  exact (continuous_uLift_down.comp continuous_subtype_val).subtype_val
end -- experiment with easier funcitons

def diskToCube (n : ‚Ñ§) : disk n ‚Üí cube n
  | ‚ü®x, hx‚ü© => if ‚àÄ i, x i = 0 then ‚ü®0, by simp [cube]‚ü© else
      ‚ü® (‚Äñx‚Äñ * ‚ÄñWithLp.equiv 2 _ x‚Äñ‚Åª¬π) ‚Ä¢ x, by  -- (‚Äñx‚Äñ‚ÇÇ / ‚Äñx‚Äñ_‚àû) ‚Ä¢ x
        simp only [Set.mem_setOf_eq, norm_smul, norm_mul, norm_norm, norm_inv]
        rw [mul_assoc]
        simp only [Metric.mem_closedBall, dist_zero_right] at hx
        exact Left.mul_le_one_of_le_of_le hx inv_mul_le_one (norm_nonneg _)‚ü©

lemma continuousOn_diskToCube (n : ‚Ñ§) : ContinuousOn (diskToCube n) { ‚ü®x, _‚ü© | ¬¨‚àÄ i, x i = 0 } := by
  apply continuousOn_iff_continuous_restrict.mpr
  unfold Set.restrict diskToCube
  refine continuous_uLift_up.comp ?_
  refine Continuous.subtype_mk ?_ _
  simp only [Set.coe_setOf, Set.mem_setOf_eq]
  sorry

lemma continuous_diskToCube (n : ‚Ñ§) : Continuous (diskToCube n) :=
  continuous_iff_continuousAt.mpr fun ‚ü®x, hx‚ü© ‚Ü¶ by
    by_cases hx0 : ‚àÄ i, x i = 0
    . sorry
    sorry

def cubeToDisk (n : ‚Ñ§) : cube.{u} n ‚Üí disk.{u} n
  | ‚ü®x, hx‚ü© => if ‚àÄ i, x i = 0 then ‚ü®0, by simp [disk]‚ü© else
      ‚ü® (‚Äñx‚Äñ * ‚Äñ(WithLp.equiv 2 _).symm x‚Äñ‚Åª¬π) ‚Ä¢ x, by  -- (‚Äñx‚Äñ_‚àû / ‚Äñx‚Äñ‚ÇÇ) ‚Ä¢ x
        simp only [Metric.mem_closedBall, dist_zero_right, norm_smul, norm_mul, norm_norm, norm_inv]
        rw [mul_assoc]
        exact Left.mul_le_one_of_le_of_le hx inv_mul_le_one (norm_nonneg _)‚ü©

lemma continuous_cubeToDisk (n : ‚Ñ§) : Continuous (cubeToDisk n) := by
  sorry

lemma cubeToDisk_comp_diskToCube (n : ‚Ñ§) : ‚àÄ x, cubeToDisk n (diskToCube n x) = x := fun ‚ü®x, _‚ü© ‚Ü¶ by
  unfold cubeToDisk
  by_cases hx0 : ‚àÄ i, x i = 0
  ¬∑ simp [diskToCube, hx0]
    congr
    exact (PiLp.ext hx0).symm
  split
  next _ y hy hfx =>
    have hfx := congrArg ULift.down hfx
    simp [diskToCube, hx0] at hfx
    have hx0' : x ‚â† 0 := fun h ‚Ü¶ hx0 (congrFun h)
    have hf0 : ¬¨‚àÄ i, y i = 0 := by simpa [‚Üê hfx, hx0, hx0', Decidable.not_forall.mp]
    split_ifs
    congr
    simp [‚Üê hfx, norm_smul, smul_smul]
    rw [mul_assoc ‚Äñx‚Äñ]
    conv in ‚Äñx‚Äñ * _ => arg 2; equals 1 => exact inv_mul_cancel‚ÇÄ (norm_ne_zero_iff.mpr ‚Äπ_‚Ä∫)
    simp only [mul_one, ‚Üê mul_assoc]
    conv in ‚Äñx‚Äñ * _ => equals 1 => exact mul_inv_cancel‚ÇÄ (norm_ne_zero_iff.mpr ‚Äπ_‚Ä∫)
    rw [one_mul, mul_assoc _ _ ‚Äñx‚Äñ, @inv_mul_cancel‚ÇÄ _ _ ‚Äñx‚Äñ (norm_ne_zero_iff.mpr ‚Äπ_‚Ä∫), mul_one]
    conv_lhs => arg 1; equals 1 => exact mul_inv_cancel‚ÇÄ (norm_ne_zero_iff.mpr ‚Äπ_‚Ä∫)
    rw [one_smul]

lemma diskToCube_comp_cubeToDisk (n : ‚Ñ§) : ‚àÄ x, diskToCube n (cubeToDisk n x) = x := fun ‚ü®x, _‚ü© ‚Ü¶ by
  unfold diskToCube
  by_cases hx0 : ‚àÄ i, x i = 0
  . simp [cubeToDisk, hx0]
    congr
    aesop
  split
  next _ y hy hgx =>
    have hgx := congrArg ULift.down hgx
    simp [cubeToDisk, hx0] at hgx
    have hx0' : x ‚â† 0 := fun h ‚Ü¶ hx0 (congrFun h)
    have hg0 : ¬¨‚àÄ i, y i = 0 := by simpa [‚Üê hgx, hx0, hx0', Decidable.not_forall.mp]
    split_ifs
    congr
    simp [‚Üê hgx, norm_smul, smul_smul]
    rw [mul_assoc ‚Äñx‚Äñ]
    conv in ‚Äñx‚Äñ * _ => arg 2; equals 1 => exact inv_mul_cancel‚ÇÄ (norm_ne_zero_iff.mpr ‚Äπ_‚Ä∫)
    have : (x : Fin n.toNat ‚Üí ‚Ñù) ‚Üí ‚Äñ(WithLp.equiv 2 _) x‚Äñ = ‚Äñx‚Äñ := fun x ‚Ü¶ rfl
    simp [this, norm_smul, ‚Üê mul_assoc]
    conv in ‚Äñx‚Äñ * _ => equals 1 => exact mul_inv_cancel‚ÇÄ (norm_ne_zero_iff.mpr ‚Äπ_‚Ä∫)
    rw [one_mul, mul_assoc _ _ ‚Äñx‚Äñ, @inv_mul_cancel‚ÇÄ _ _ ‚Äñx‚Äñ (norm_ne_zero_iff.mpr ‚Äπ_‚Ä∫), mul_one]
    conv_lhs => arg 1; equals 1 => exact mul_inv_cancel‚ÇÄ (norm_ne_zero_iff.mpr ‚Äπ_‚Ä∫)
    rw [one_smul]

def disk_homeo_cube (n : ‚Ñ§) : disk n ‚âÉ‚Çú cube n where
  toFun := diskToCube n
  invFun := cubeToDisk n
  left_inv := cubeToDisk_comp_diskToCube n
  right_inv := diskToCube_comp_cubeToDisk n
  continuous_toFun := continuous_diskToCube n
  continuous_invFun := continuous_cubeToDisk n

end -- change of base point (draft)


section

open scoped ENNReal NNReal

open scoped Topology TopCat

noncomputable def Cube.center : I^Œ± := fun _ ‚Ü¶ ‚ü®1 / 2, by simp [inv_le_comm‚ÇÄ]‚ü©

noncomputable def Cube.ofDisk (n : ‚Ñï) : (ùîª n) ‚Üí (I^ Fin n)
  | ‚ü®‚ü®x, hx‚ü©‚ü© => if ‚àÄ i, x i = 0 then Cube.center else fun i ‚Ü¶ ‚ü®iSup x, sorry‚ü©

noncomputable def Cube.toDisk (n : ‚Ñï) : (I^ Fin n) ‚Üí (ùîª n) := by
  sorry

def Cube.homeoDisk (n : ‚Ñï) : (I^ Fin n) ‚âÉ‚Çú (ùîª n) where
  toFun := sorry
  invFun := sorry
  left_inv := sorry
  right_inv := sorry
  continuous_toFun := sorry
  continuous_invFun := sorry

end
