import Mathlib.Topology.CWComplex
import Mathlib.Topology.Homotopy.HomotopyGroup


open scoped Topology TopCat ENNReal

section pDisk

universe u

variable (n : ‚Ñ§) (p q : ‚Ñù‚â•0‚àû) [hp : Fact (1 ‚â§ p)] [hq : Fact (1 ‚â§ q)]

/-- The unit disk in `‚Ñù‚Åø` based on the `L·µñ` norm, where `p ‚â• 1`.  -/
def pDisk : TopCat.{u} :=
  TopCat.of <| ULift <| Metric.closedBall (0 : PiLp p fun (_ : Fin n.toNat) ‚Ü¶ ‚Ñù) 1

namespace pDisk

-- Note: need to declare the instances manually because `pDisk` and `TopCat` are not `abbrev`s.
instance instT1Space : T1Space (pDisk n p) :=
  letI : T1Space (ULift _) := inferInstance; ‚Äπ_‚Ä∫

noncomputable instance instPseudoMetricSpace : PseudoMetricSpace (pDisk n p) :=
  letI : PseudoMetricSpace (ULift _) := inferInstance; ‚Äπ_‚Ä∫

lemma dist_eq (x y : pDisk n p) : dist x y = dist x.down.val y.down.val :=
  rfl

/-- Use `0` to denote the center of the disk. -/
instance : OfNat (pDisk n p) 0 where
  ofNat := ‚ü®‚ü®0, Metric.mem_closedBall_self zero_le_one‚ü©‚ü©

lemma zero_eq : 0 = (0 : pDisk n p).down.val :=
  rfl

lemma eq_zero_iff (x : pDisk n p) : x = 0 ‚Üî x.down.val = 0 :=
  ‚ü®fun h ‚Ü¶ by subst h; rfl, fun h ‚Ü¶ by obtain ‚ü®x, _‚ü© := x; congr‚ü©

/-- Map `x` to `(‚Äñx‚Äñ_p / ‚Äñx‚Äñ_q) ‚Ä¢ x`.
Note that division by zero evaluates to zero (see `toQDisk_zero`). -/
noncomputable def toQDisk : pDisk n p ‚Üí pDisk n q
  | ‚ü®x, hx‚ü© => ‚ü® (‚Äñx‚Äñ * ‚ÄñWithLp.equiv q (Fin n.toNat ‚Üí ‚Ñù) |>.symm x‚Äñ‚Åª¬π) ‚Ä¢ x, by
      simp only [Metric.mem_closedBall, dist_zero_right] at *
      simp only [norm_smul, norm_mul, Real.norm_eq_abs, abs_norm, norm_inv]
      rw [mul_assoc]
      -- Note that the two occurrences of `‚Äñx‚Äñ` in the goal
      -- `‚ä¢ ‚Äñx‚Äñ * (‚Äñ(WithLp.equiv q (Fin n.toNat ‚Üí ‚Ñù)).symm x‚Äñ‚Åª¬π * ‚Äñx‚Äñ) ‚â§ 1` are different.
      -- The first `‚Äñx‚Äñ` is `@norm (PiLp p fun x => ‚Ñù) SeminormedAddGroup.toNorm x : ‚Ñù`
      -- The last `‚Äñx‚Äñ` is `@norm (PiLp q fun x => ‚Ñù) SeminormedAddGroup.toNorm x : ‚Ñù`
      -- Hence the goal is interpreted as `‚Äñx‚Äñ_p * (‚Äñx‚Äñ_q‚Åª¬π * ‚Äñx‚Äñ_q) ‚â§ 1`
      exact Left.mul_le_one_of_le_of_le hx inv_mul_le_one (norm_nonneg _) ‚ü©

/-- `pDisk.toQDisk` maps `0` to `0`.
Note that division by zero evaluates to zero, due to `GroupWithZero.inv_zero`. -/
lemma toQDisk_zero : pDisk.toQDisk n p q 0 = 0 := by
  unfold toQDisk
  simp only [norm_zero, WithLp.equiv_symm_zero, inv_zero, mul_zero, smul_zero]
  congr

/-- The map `toQDisk` has a left inverse. -/
lemma toPDisk_comp_toQDisk x : toQDisk n q p (toQDisk n p q x) = x := by
  unfold toQDisk
  by_cases hx0 : x = 0
  ¬∑ simp only [hx0, norm_zero, WithLp.equiv_symm_zero, inv_zero, mul_zero, smul_zero, eq_zero_iff]
  split; next _ y hy hfx =>
    rcases x with ‚ü®x, _‚ü©
    replace hx0 : x ‚â† 0 := fun h ‚Ü¶ hx0 (by congr)
    replace hfx := congrArg ULift.down hfx
    simp only [Subtype.mk.injEq] at hfx
    congr
    simp only [‚Üê hfx, WithLp.equiv_symm_smul]
    simp only [norm_smul, norm_mul, norm_norm, norm_inv, mul_inv_rev, inv_inv, smul_smul]
    rw [mul_assoc ‚Äñx‚Äñ]
    conv in ‚Äñx‚Äñ * _ => arg 2; equals 1 => exact inv_mul_cancel‚ÇÄ (norm_ne_zero_iff.mpr hx0)
    simp only [mul_one, ‚Üê mul_assoc]
    conv in ‚Äñx‚Äñ * _ => equals 1 => exact mul_inv_cancel‚ÇÄ (norm_ne_zero_iff.mpr hx0)
    rw [one_mul, mul_assoc _ _ ‚Äñx‚Äñ, @inv_mul_cancel‚ÇÄ _ _ ‚Äñx‚Äñ (norm_ne_zero_iff.mpr hx0), mul_one]
    conv_lhs => arg 1; equals 1 => exact mul_inv_cancel‚ÇÄ (norm_ne_zero_iff.mpr hx0)
    rw [one_smul]

/-- The map `toQDisk` is continuous at `0`. -/
lemma continuousAt_toQDisk_zero : ContinuousAt (toQDisk n p q) 0 := by
  apply continuousAt_of_locally_lipschitz (_ : 0 < (1 : ‚Ñù)) 1
  swap; norm_num
  intro ‚ü®x, hx‚ü© h
  rw [toQDisk_zero]
  simp only [dist_eq, ‚Üê zero_eq, dist_zero_right, one_mul] at *
  simp only [toQDisk, norm_smul, norm_mul, norm_norm, norm_inv]
  by_cases hx0 : x = 0
  ¬∑ simp only [hx0, norm_zero, WithLp.equiv_symm_zero, inv_zero, mul_zero, le_refl]
  rw [mul_assoc, mul_le_iff_le_one_right (norm_pos_iff.mpr hx0)]
  exact inv_mul_le_one

/-- The map `toQDisk` is continuous on `{x | x ‚â† 0}`. -/
lemma continuousOn_toQDisk_nonzero : ContinuousOn (toQDisk n p q) {x | x ‚â† 0} := by
  apply continuousOn_iff_continuous_restrict.mpr
  unfold Set.restrict toQDisk
  simp only [ne_eq, Set.coe_setOf, Set.mem_setOf_eq]
  refine continuous_uLift_up.comp <| Continuous.subtype_mk ?_ _
  refine Continuous.smul ?_ (continuous_uLift_down.comp continuous_subtype_val).subtype_val
  apply Continuous.mul (continuous_uLift_down.comp continuous_subtype_val).subtype_val.norm
  conv_rhs => intro x; rw [inv_eq_one_div]
  apply Continuous.div continuous_const
  ¬∑ apply Continuous.norm
    apply @PiLp.continuous_equiv_symm _ _ (fun _ ‚Ü¶ ‚Ñù) |>.comp -- deleting this line results in deterministic timeout
    exact continuous_uLift_down.comp continuous_subtype_val |>.subtype_val
  intro ‚ü®x, hx0‚ü© h
  simp only [norm_eq_zero] at h
  change x.down.val = 0 at h
  rw [‚Üê eq_zero_iff] at h
  exact hx0 h

/-- The map `toQDisk` is continuous. -/
lemma continuous_toQDisk : Continuous (toQDisk n p q) :=
  continuous_iff_continuousAt.mpr fun ‚ü®x, hx‚ü© ‚Ü¶ by
    by_cases hx0 : x = 0
    ¬∑ subst hx0
      exact continuousAt_toQDisk_zero n p q
    exact (continuousOn_toQDisk_nonzero n p q).continuousAt
      (IsOpen.mem_nhds (IsClosed.not isClosed_singleton) fun h ‚Ü¶ by
        simp only [eq_zero_iff] at h
        exact hx0 h)

/-- `pDisk n p` (the unit disk in `‚Ñù‚Åø` based on the `L·µñ` norm) is homeomorphic to
`pDisk n q` (the unit disk in `‚Ñù‚Åø` based on the `L^q` norm). -/
noncomputable def homeoQDisk : pDisk n p ‚âÉ‚Çú pDisk n q where
  toFun := toQDisk n p q
  invFun := toQDisk n q p
  left_inv := toPDisk_comp_toQDisk n p q
  right_inv := toPDisk_comp_toQDisk n q p
  continuous_toFun := continuous_toQDisk n p q
  continuous_invFun := continuous_toQDisk n q p

end pDisk

end pDisk

-- noncomputable def diskHomeoPDisk : ùîª n ‚âÉ‚Çú pDisk n 2 where
--   toFun := id
--   -- invFun := id
--   left_inv := congrFun rfl
--   right_inv := congrFun rfl
--   -- continuous_toFun := continuous_id
--   -- continuous_invFun := continuous_id

/-- Auxiliary theorem used in `largeCubeHomeoPDisk`. -/
theorem Real.forall_le_of_iSup_le_of_bddAbove_range {Œπ : Sort*} {f : Œπ ‚Üí ‚Ñù} {a : ‚Ñù}
    (hbdd : BddAbove (Set.range f)) (hf : ‚®Ü i, f i ‚â§ a) : ‚àÄ (i : Œπ), f i ‚â§ a := fun i ‚Ü¶ by
  cases (Set.range f).eq_empty_or_nonempty
  ¬∑ exact Set.range_eq_empty_iff.mp ‚Äπ_‚Ä∫ |>.false i |>.elim
  ¬∑ exact Real.isLUB_sSup ‚Äπ_‚Ä∫ hbdd |>.left (Set.mem_range_self i) |>.trans hf

/-- Auxiliary theorem used in `largeCubeHomeoPDisk`. -/
theorem Real.forall_le_of_iSup_le_of_finite_domain {Œπ : Type*} {f : Œπ ‚Üí ‚Ñù} {a : ‚Ñù}
    [hfin : Finite Œπ] (hf : ‚®Ü i, f i ‚â§ a) : ‚àÄ (i : Œπ), f i ‚â§ a := by
  refine forall_le_of_iSup_le_of_bddAbove_range ?_ hf
  cases isEmpty_or_nonempty Œπ
  ¬∑ exact ‚ü®0, fun y hy ‚Ü¶ (IsEmpty.exists_iff.mp hy).elim‚ü©
  ¬∑ obtain ‚ü®i, hi‚ü© := Finite.exists_max f
    exact ‚ü®f i, fun y hy ‚Ü¶ by
      obtain ‚ü®j, hj‚ü© := Set.mem_range.mp hy
      rw [‚Üê hj]; exact hi j‚ü©

/-- The large cube $[-1, 1]^n$ is homeomorphic to `pDisk n ‚àû` (the disk in `‚Ñù‚Åø` based on the `L‚àû` norm). -/
def largeCubeHomeoPDisk : (Fin n.toNat ‚Üí Set.Icc (-1 : ‚Ñù) (1 : ‚Ñù)) ‚âÉ‚Çú pDisk n ‚àû where
  toFun := fun x ‚Ü¶ ‚ü®‚ü®fun i ‚Ü¶ x i, by
    simp only [Int.toNat_ofNat, Metric.mem_closedBall, PiLp.dist_eq_iSup]
    refine Real.iSup_le ?_ (by norm_num)
    intro i
    simp only [PiLp.zero_apply, dist_zero_right, Real.norm_eq_abs, abs_le]
    exact ‚ü®le_trans (by norm_num) (x i).prop.left, (x i).prop.right‚ü© ‚ü©‚ü©
  invFun := fun ‚ü®‚ü®x, hx‚ü©‚ü© i ‚Ü¶ ‚ü®x i, by
    simp only [Metric.mem_closedBall, dist_zero_right, PiLp.norm_eq_ciSup, Real.norm_eq_abs] at hx
    -- Note: Here we cannot simply use `iSup_le_iff` because `‚Ñù` is not a `CompleteLattice`.
    -- We cannot use `Finset.le_sup` either, because although `‚Ñù` is a `SemilatticeSup`,
    -- it does not have a smallest element (i.e., we do not have `[OrderBot ‚Ñù]`).
    -- With these restrictions, `Real.sSup_def`, the supremum of a set of real numbers,
    -- is defined in mathlib to be `0` if the set is not bounded from above or is empty.
    have := Real.forall_le_of_iSup_le_of_finite_domain hx i
    exact ‚ü®neg_le_of_abs_le this, le_of_max_le_left this‚ü© ‚ü©
  left_inv := fun x ‚Ü¶ rfl
  right_inv := fun ‚ü®‚ü®x, hx‚ü©‚ü© ‚Ü¶ rfl
  continuous_toFun := by
    refine continuous_uLift_up.comp (Continuous.subtype_mk ?_ _)
    exact continuous_pi fun i ‚Ü¶ Continuous.subtype_val (continuous_apply i)
  continuous_invFun := continuous_pi fun i ‚Ü¶
    (continuous_apply i).comp continuous_uLift_down.subtype_val |>.subtype_mk _

/-- The large cube $[-1, 1]^n$ is homeomorphic to the cube $[0, 1]^n$. -/
noncomputable def largeCubeHomeoCube {n : ‚Ñ§} :
    (Fin n.toNat ‚Üí Set.Icc (-1 : ‚Ñù) (1 : ‚Ñù)) ‚âÉ‚Çú I^ Fin n.toNat :=
  Homeomorph.piCongrRight fun _ ‚Ü¶ iccHomeoI _ _ (by norm_num)

/-- The n-disk `ùîª n` is homeomorphic to the cube $[0, 1]^n$. -/
noncomputable def diskHomeoCube : TopCat.disk.{u} n ‚âÉ‚Çú (I^ Fin n.toNat) :=
  (pDisk.homeoQDisk.{u, u} n 2 ‚àû).trans <| largeCubeHomeoPDisk.symm.trans largeCubeHomeoCube
