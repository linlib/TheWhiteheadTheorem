import WhiteheadTheorem.Defs
import WhiteheadTheorem.RelHomotopyGroup.Defs
import WhiteheadTheorem.HEP.Cube
import WhiteheadTheorem.HEP.Cofibration
import WhiteheadTheorem.HomotopyGroup.InducedMaps
-- import Mathlib.CategoryTheory.Category.Pointed
-- import WhiteheadTheorem.HEP.Retract
-- import Mathlib.CategoryTheory.LiftingProperties.Adjunction


open scoped unitInterval Topology Topology.Homotopy TopCat CategoryTheory

universe u

variable {n : ‚Ñï}
variable {X Y Z : Type u} [TopologicalSpace X] [TopologicalSpace Y] [TopologicalSpace Z]
variable {x‚ÇÄ x‚ÇÅ x‚ÇÇ : X}

namespace GenLoop

/-- A level homotopy along a path `p` is a continuous function `H : I √ó (I^ Fin n) ‚Üí X`
such that `H ‚ü®t, y‚ü© = p t` for all `y ‚àà ‚àÇI^n`.
Note: cannot extend `HomotopyWith` because it would require intermediate maps satisfy
a predicate that does not depend on `t`. -/
structure LevelHomotopy (f‚ÇÄ : Œ©^ (Fin n) X x‚ÇÄ) (f‚ÇÅ : Œ©^ (Fin n) X x‚ÇÅ) (p : Path x‚ÇÄ x‚ÇÅ)
    extends ContinuousMap.Homotopy f‚ÇÄ.val f‚ÇÅ.val where
  prop' : ‚àÄ t, ‚àÄ y ‚àà ‚àÇI^n, toFun ‚ü®t, y‚ü© = p t


namespace LevelHomotopy

variable {f‚ÇÄ g‚ÇÄ : Œ©^ (Fin n) X x‚ÇÄ} {f‚ÇÅ : Œ©^ (Fin n) X x‚ÇÅ} {f‚ÇÇ : Œ©^ (Fin n) X x‚ÇÇ}
variable {p : Path x‚ÇÄ x‚ÇÅ} {q : Path x‚ÇÅ x‚ÇÇ}

/-- A level homotopy along the constant path -/
noncomputable def refl_of_GenLoop_homotopic (H : GenLoop.Homotopic f‚ÇÄ g‚ÇÄ) :
    LevelHomotopy f‚ÇÄ g‚ÇÄ (Path.refl _) where
  toHomotopy := H.some.toHomotopy
  prop' t y hy := by
    simp only [ContinuousMap.toFun_eq_coe, ContinuousMap.Homotopy.coe_toContinuousMap,
      ContinuousMap.HomotopyWith.coe_toHomotopy, Path.refl_apply]
    have := H.some.prop' t y hy
    simp only [ContinuousMap.toFun_eq_coe, ContinuousMap.Homotopy.coe_toContinuousMap,
      ContinuousMap.HomotopyWith.coe_toHomotopy, ContinuousMap.coe_mk] at this
    rw [this, f‚ÇÄ.property y hy]

/-- The reverse of a level homotopy along `p`,
as a level homotopy along the reversed path `p.symm` -/
def symm (L : LevelHomotopy f‚ÇÄ f‚ÇÅ p) : LevelHomotopy f‚ÇÅ f‚ÇÄ p.symm where
  toHomotopy := L.toHomotopy.symm
  prop' t y hy := L.prop' (œÉ t) y hy

/-- The concatenation of two level homotopies -/
noncomputable def trans (K : LevelHomotopy f‚ÇÄ f‚ÇÅ p) (L : LevelHomotopy f‚ÇÅ f‚ÇÇ q) :
    LevelHomotopy f‚ÇÄ f‚ÇÇ (p.trans q) where
  toHomotopy := K.toHomotopy.trans L.toHomotopy
  prop' t y hy := by
    simp only [ContinuousMap.Homotopy.trans, one_div, ContinuousMap.toFun_eq_coe,
      ContinuousMap.coe_mk, Path.trans, Path.coe_mk_mk, Function.comp_apply]
    by_cases ht : t ‚â§ (2‚Åª¬π : ‚Ñù)
    all_goals simp only [ht, ‚ÜìreduceIte,
      ContinuousMap.Homotopy.extend, ContinuousMap.coe_IccExtend, Path.extend]
    ¬∑ have t_mem : 2 * t.val ‚àà I := ‚ü®by linarith only [t.property.left], by linarith only [ht]‚ü©
      iterate 2 (rw [Set.IccExtend_of_mem _ _ t_mem])
      rw [ContinuousMap.Homotopy.curry_apply]
      exact K.prop' ‚ü®2 * t, t_mem‚ü© y hy
    ¬∑ have t_mem : 2 * t.val - 1 ‚àà I := ‚ü®by linarith only [ht], by linarith only [t.property.right]‚ü©
      iterate 2 (rw [Set.IccExtend_of_mem _ _ t_mem])
      rw [ContinuousMap.Homotopy.curry_apply]
      exact L.prop' ‚ü®2 * t - 1, t_mem‚ü© y hy

/-- A level homotopy whose intermediate maps are constant `GenLoop`s -/
def const_loops : LevelHomotopy (@const (Fin n) _ _ _) const p where
  toContinuousMap := ‚ü®fun ‚ü®t, y‚ü© ‚Ü¶ p t, by fun_prop‚ü©
  map_zero_left y := by simp only [Path.source, const, ContinuousMap.const_apply]
  map_one_left y := by simp only [Path.target, const, ContinuousMap.const_apply]
  prop' t y hy := rfl

/-- Given a level homotopy from `f‚ÇÄ` to `f‚ÇÅ`,
produce a level homotopy from `g ‚àò f‚ÇÄ` to `g ‚àò f‚ÇÅ`. -/
def map (g : C(X, Y)) (L : LevelHomotopy f‚ÇÄ f‚ÇÅ p) :
    LevelHomotopy (HomotopyGroup.inducedMap n x‚ÇÄ g f‚ÇÄ) (HomotopyGroup.inducedMap n x‚ÇÅ g f‚ÇÅ)
      (p.map g.continuous) where
  toHomotopy := L.toHomotopy.hcomp (ContinuousMap.Homotopy.refl _)
  prop' t y hy := by
    simp only [ContinuousMap.toFun_eq_coe, ContinuousMap.Homotopy.coe_toContinuousMap, Path.map_coe,
      Function.comp_apply]
    rw [ContinuousMap.Homotopy.hcomp_apply]
    rw [ContinuousMap.Homotopy.refl_apply]
    congr 1
    exact L.prop' t y hy

end LevelHomotopy



/-- If `f` and `g` are `GenLoop`s at `x‚ÇÄ` such that there is a `LevelHomotopy` from `f` to `g`
along a null-homotopic loop `p`, then `f` and `g` are homotopic as `GenLoop`s
(i.e., homotopic rel `‚àÇI^n`). -/
theorem homotopic_of_levelHomotopy_along_null_loop {f g : Œ©^ (Fin n) X x‚ÇÄ}
    {p : Œ© X x‚ÇÄ} (H : LevelHomotopy f g p) (pnull : Path.Homotopic p (Path.refl _)) :
    GenLoop.Homotopic f g := by
  let Fb : C((ùïÄ n) √ó I, X) :=  -- bottom `fun ‚ü®‚ü®y‚ü©, t‚ü© ‚Ü¶ H.toFun ‚ü®t, y‚ü©`
    H.toContinuousMap.comp <|
    ((ContinuousMap.id _).prodMap ‚ü®ULift.down, continuous_uliftDown‚ü©).comp ContinuousMap.prodSwap
  let Fs : C(((‚àÇùïÄ n) √ó I) √ó I, X) := ‚ü®fun ‚ü®‚ü®‚ü®y‚ü©, t‚ü©, s‚ü© ‚Ü¶ pnull.some ‚ü®s, t‚ü©, by fun_prop‚ü© -- sides
  have : Fb ‚àò ((TopCat.cubeBoundaryInclusion n).hom.prodMap (ContinuousMap.id I)) =
      Fs ‚àò fun x ‚Ü¶ (x, 0) := by
    funext ‚ü®y, t‚ü©
    simp only [ContinuousMap.coe_comp, ContinuousMap.Homotopy.coe_toContinuousMap,
      Function.comp_apply, ContinuousMap.prodMap_apply, ContinuousMap.coe_id, Prod.map_apply, id_eq,
      ContinuousMap.coe_mk, Path.coe_toContinuousMap, Fb, Fs]
    change H.toFun (t, ((TopCat.cubeBoundaryInclusion n).hom y).down) = (Nonempty.some pnull) (0, t)
    rw [H.prop' t ((TopCat.cubeBoundaryInclusion n).hom y).down y.down.property]
    rw [pnull.some.apply_zero _]
    rfl
  obtain ‚ü®F, ‚ü®hFb, hFs‚ü©‚ü© := TopCat.cubeBoundaryInclusion_prod_unitInterval_hasHEP n X Fb Fs this
  have Fyts_eq_x‚ÇÄ (y : ‚àÇI^n) (t s : I) (hts : (t = 0 ‚à® t = 1) ‚à® s = 1) :
      F ((‚ü®y.val‚ü©, t), s) = x‚ÇÄ := by
    have := congrFun hFs ((‚ü®y‚ü©, t), s)
    dsimp [TopCat.cubeBoundaryInclusion] at this
    change _ = F ((‚ü®y.val‚ü©, t), s) at this
    rw [‚Üê this]
    dsimp only [Path.coe_toContinuousMap, ContinuousMap.coe_mk, Fs, Fb]
    obtain ht | hs := hts
    ¬∑ have := pnull.some.prop' s t ht
      simp at this; rw [this]
      cases ht with
      | inl ht0 => rw [ht0, p.source]
      | inr ht1 => rw [ht1, p.target]
    ¬∑ rw [hs]
      simp only [ContinuousMap.HomotopyWith.apply_one, Path.coe_toContinuousMap, Path.refl_apply,
        Fb, Fs]
  let Fyts (t s : I) (hts : (t = 0 ‚à® t = 1) ‚à® s = 1) : Œ©^ (Fin n) X x‚ÇÄ :=
    ‚ü®‚ü®fun y ‚Ü¶ F ((‚ü®y‚ü©, t), s), by fun_prop‚ü©, fun y hy ‚Ü¶ Fyts_eq_x‚ÇÄ ‚ü®y, hy‚ü© t s hts‚ü©
  let Fy01 := Fyts 0 1 (Or.inr rfl)
  let Fy11 := Fyts 1 1 (Or.inr rfl)
  have f_Fy01 : GenLoop.Homotopic f Fy01 := Nonempty.intro
    { toFun := fun ‚ü®s, y‚ü© ‚Ü¶ Fyts 0 s (Or.inl <| Or.inl rfl) y
      continuous_toFun := by simp [Fyts]; fun_prop
      map_zero_left y := by
        simp [Fyts]
        have := congrFun hFb ‚ü®‚ü®y‚ü©, 0‚ü©; simp at this
        rw [‚Üê this]
        simp [Fb]
        exact H.apply_zero y
      map_one_left y := by dsimp [Fyts, Fy01]
      prop' s y hy := by
        simp [Fyts]
        rw [f.property y hy]
        exact Fyts_eq_x‚ÇÄ ‚ü®y, hy‚ü© _ _ (Or.inl <| Or.inl rfl) }
  have Fy01_Fy11 : GenLoop.Homotopic Fy01 Fy11 := Nonempty.intro
    { toFun := fun ‚ü®t, y‚ü© ‚Ü¶ Fyts t 1 (Or.inr rfl) y
      continuous_toFun := by simp [Fyts]; fun_prop
      map_zero_left y := by simp [Fyts, Fy01]
      map_one_left y := by simp [Fyts, Fy11]
      prop' t y hy := by
        simp [Fyts, Fy01]
        iterate 2 (rw [Fyts_eq_x‚ÇÄ ‚ü®y, hy‚ü© _ _ (Or.inr rfl)]) }
  have g_Fy11 : GenLoop.Homotopic g Fy11 := Nonempty.intro
    { toFun := fun ‚ü®s, y‚ü© ‚Ü¶ Fyts 1 s (Or.inl <| Or.inr rfl) y
      continuous_toFun := by simp [Fyts]; fun_prop
      map_zero_left y := by
        simp [Fyts]
        have := congrFun hFb ‚ü®‚ü®y‚ü©, 1‚ü©; simp at this
        rw [‚Üê this]
        simp [Fb]
        exact H.apply_one y
      map_one_left y := by dsimp [Fyts, Fy11]
      prop' t y hy := by
        simp [Fyts]
        rw [g.property y hy]
        exact Fyts_eq_x‚ÇÄ ‚ü®y, hy‚ü© _ _ (Or.inl <| Or.inr rfl) }
  exact f_Fy01.trans Fy01_Fy11 |>.trans g_Fy11.symm

/-- Suppose `f`, `g` and `h` are `GenLoop`s,
`K` is a level homotopy from `f` to `g` along a path `p`, and
`L` is a level homotopy from `f` to `h` along a path `q`.
If `p` and `q` are homotopic as pathhs (i.e., rel endpoints),
then `g` and `h` are homotopic as `GenLoop`s (i.e., rel `‚àÇI^n`). -/
theorem homotopic_of_levelHomotopy_along_homotopic_paths
    {f : Œ©^ (Fin n) X x‚ÇÄ} {g h : Œ©^ (Fin n) X x‚ÇÅ} {p q : Path x‚ÇÄ x‚ÇÅ}
    (K : LevelHomotopy f g p) (L : LevelHomotopy f h q) (pq : Path.Homotopic p q) :
    GenLoop.Homotopic g h := by
  apply homotopic_of_levelHomotopy_along_null_loop (K.symm.trans L)
  have pq_pp : (p.symm.trans q).Homotopic (p.symm.trans p) :=
    Path.Homotopic.hcomp (Path.Homotopic.refl p.symm) pq.symm
  have pp_0 : (p.symm.trans p).Homotopic (Path.refl _) :=
    Nonempty.intro <| (Path.Homotopy.reflSymmTrans p).symm
  exact pq_pp.trans pp_0


structure ChangeBasePt (f‚ÇÄ : Œ©^ (Fin n) X x‚ÇÄ) (p : Path x‚ÇÄ x‚ÇÅ) where
  res : Œ©^ (Fin n) X x‚ÇÅ
  levelHomotopy : LevelHomotopy f‚ÇÄ res p

noncomputable def ChangeBasePt.get
    (f‚ÇÄ : Œ©^ (Fin n) X x‚ÇÄ) (p : Path x‚ÇÄ x‚ÇÅ) : ChangeBasePt f‚ÇÄ p := by
  let f‚ÇÄ' : C(ùïÄ n, X) := (f‚ÇÄ.val).comp ‚ü®ULift.down, continuous_uliftDown‚ü©
  let h : C((‚àÇùïÄ n) √ó I, X) := ‚ü®fun ‚ü®_, t‚ü© ‚Ü¶ p t, by fun_prop‚ü©
  have hep := TopCat.cubeBoundaryInclusion_hasHEP n X f‚ÇÄ' h
  have : f‚ÇÄ' ‚àò (TopCat.cubeBoundaryInclusion n).hom = h ‚àò fun x ‚Ü¶ (x, 0) := by
    funext ‚ü®y, hy‚ü©
    simp only [Function.comp_apply, ContinuousMap.coe_mk, Path.source, h]
    exact f‚ÇÄ.property y hy
  let H' := Classical.choose (hep this)
  have H'_spec := Classical.choose_spec (hep this)
  constructor
  case res => exact
    ‚ü® ‚ü®fun y ‚Ü¶ H' ‚ü®‚ü®y‚ü©, 1‚ü©, by fun_prop‚ü©,  -- include to the top face, then apply `H'`
      fun y hy ‚Ü¶ by  -- f‚ÇÅ is a `GenLoop`
        change H' ‚ü®(TopCat.cubeBoundaryInclusion n) ‚ü®y, hy‚ü©, 1‚ü© = _
        have := congr_fun H'_spec.right ‚ü®‚ü®y, hy‚ü©, 1‚ü©
        dsimp only [Function.comp_apply, Prod.map_apply, id_eq, h] at this
        rw [‚Üê this, ContinuousMap.coe_mk, Path.target] ‚ü©
  case levelHomotopy => exact
    { toContinuousMap := H'.comp <| ContinuousMap.prodSwap.comp <|
          ContinuousMap.prodMap (ContinuousMap.id _) ‚ü®ULift.up, continuous_uliftUp‚ü©
      map_zero_left y := by
        dsimp
        exact (congr_fun H'_spec.left ‚ü®y‚ü©).symm
      map_one_left y := by simp
      prop' t y hy := by
        dsimp
        change H' ‚ü®(TopCat.cubeBoundaryInclusion n).hom ‚ü®y, hy‚ü©, t‚ü© = _
        have := congr_fun H'_spec.right ‚ü®‚ü®y, hy‚ü©, t‚ü©
        dsimp only [Function.comp_apply, Prod.map_apply, id_eq] at this
        rw [‚Üê this]
        dsimp only [ContinuousMap.coe_mk, h] }

scoped[Topology.Homotopy] notation "(" p " # " f‚ÇÄ ")" =>
  GenLoop.ChangeBasePt.res (GenLoop.ChangeBasePt.get f‚ÇÄ p)
scoped[Topology.Homotopy] notation "(" p " #~ " f‚ÇÄ ")" =>
  GenLoop.ChangeBasePt.levelHomotopy (GenLoop.ChangeBasePt.get f‚ÇÄ p)

namespace ChangeBasePt

/-- If `p` and `q` are homotopic paths (rel endpoints), then `p# = q#`
in the sense that `(p # f)` and `(q # f)` are homotopic `GenLoop`s for all `f`.
See also `HomotopyGroup.changeBasePt.eq_of_path_homotopic`. -/
lemma homotopic_of_path_homotopic {f‚ÇÄ : Œ©^ (Fin n) X x‚ÇÄ}
    {p q : Path x‚ÇÄ x‚ÇÅ} (pq : Path.Homotopic p q) :
    GenLoop.Homotopic (p # f‚ÇÄ) (q # f‚ÇÄ) :=
  homotopic_of_levelHomotopy_along_homotopic_paths (p #~ f‚ÇÄ) (q #~ f‚ÇÄ) pq

/-- `p#` sends (the homotopy class of) the const loop at `x‚ÇÄ` to
(the homotopy class of) the const loop at `x‚ÇÅ`. -/
lemma apply_const {p : Path x‚ÇÄ x‚ÇÅ} :
    GenLoop.Homotopic (p # const) <| @const (Fin n) _ _ _ :=
  homotopic_of_levelHomotopy_along_homotopic_paths
    (p #~ const) GenLoop.LevelHomotopy.const_loops (Path.Homotopic.refl p)

/-- Changing base point along the constant path `Path.refl _` does nothing. -/
lemma along_const {f : Œ©^ (Fin n) X x‚ÇÄ} :
    GenLoop.Homotopic f (Path.refl _ # f) :=
  Nonempty.intro
    { toHomotopy := (Path.refl _ #~ f).toHomotopy
      prop' t y hy := by
        change (_ #~ _).toFun _ = _
        rw [(Path.refl _ #~ f).prop' t y hy, f.property y hy]
        rfl }

/-- Changing base point along a null-homotopic loop `p` does nothing. -/
lemma along_null_path {f : Œ©^ (Fin n) X x‚ÇÄ}
    {p : Œ© X x‚ÇÄ} (pnull : Path.Homotopic p (Path.refl _)) :
    GenLoop.Homotopic f (p # f) :=
  along_const.trans <| homotopic_of_path_homotopic pnull.symm

/-- `(q # (p # f)) ‚âà (p.trans q # f)` -/
lemma trans {p : Path x‚ÇÄ x‚ÇÅ} {q : Path x‚ÇÅ x‚ÇÇ} {f : Œ©^ (Fin n) X x‚ÇÄ} :
    GenLoop.Homotopic (q # (p # f)) (p.trans q # f) :=
  homotopic_of_levelHomotopy_along_homotopic_paths
    (GenLoop.LevelHomotopy.trans (p #~ f) (q #~ (p # f))) (p.trans q #~ f) (Path.Homotopic.refl _)

/-- ``(q # (p # f)) ‚âà (r # f)` if `r ‚âà p.trans q`. -/
lemma trans' {p : Path x‚ÇÄ x‚ÇÅ} {q : Path x‚ÇÅ x‚ÇÇ} {r : Path x‚ÇÄ x‚ÇÇ} {f : Œ©^ (Fin n) X x‚ÇÄ}
    (r_pq : Path.Homotopic r (p.trans q)) :
    GenLoop.Homotopic (q # (p # f)) (r # f) :=
  trans.trans <| homotopic_of_path_homotopic r_pq.symm

end ChangeBasePt

/-- `ChangeBasePt` commutes with the induced map, up to homotopy:
```
Œ©^ (Fin n) X x‚ÇÄ  ------ f* ---->  Œ©^ (Fin n) Y (f x‚ÇÄ)
      |                                    |
      p#                                (f ‚àò p)#
      |                                    |
      v                                    v
Œ©^ (Fin n) X x‚ÇÅ  ------ f* ---->  Œ©^ (Fin n) Y (f x‚ÇÅ)
```
See also `HomotopyGroup.map_changeBasePt_eq_changeBasePt_map`.
-/
lemma map_changeBasePt_homotopic_changeBasePt_map
    {p : Path x‚ÇÄ x‚ÇÅ} {Œ± : Œ©^ (Fin n) X x‚ÇÄ} (f : C(X, Y)) :
    GenLoop.Homotopic (HomotopyGroup.inducedMap n x‚ÇÅ f (p # Œ±))
      (p.map f.continuous # HomotopyGroup.inducedMap n x‚ÇÄ f Œ±) :=
  homotopic_of_levelHomotopy_along_homotopic_paths (GenLoop.LevelHomotopy.map f (p #~ Œ±))
    (_ #~ _) (Path.Homotopic.refl _)

end GenLoop



/-- Transport an element of `œÄ_ n X (p 0)` along the path `p`. -/
noncomputable def HomotopyGroup.changeBasePt (n : ‚Ñï) (p : Path x‚ÇÄ x‚ÇÅ) :
    œÄ_ n X x‚ÇÄ ‚Üí œÄ_ n X x‚ÇÅ := by
  apply Quotient.map fun f‚ÇÄ ‚Ü¶ (p # f‚ÇÄ)
  intro f‚ÇÄ g‚ÇÄ eq‚ÇÄ
  let Hf := (p #~ f‚ÇÄ)
  let Hg := (p #~ g‚ÇÄ)
  let L := GenLoop.LevelHomotopy.refl_of_GenLoop_homotopic eq‚ÇÄ
  apply GenLoop.homotopic_of_levelHomotopy_along_homotopic_paths Hf (L.trans Hg)
  exact Nonempty.intro <| (Path.Homotopy.reflTrans _).symm

noncomputable def FundamentalGroupoid.changeBasePt (n : ‚Ñï) : FundamentalGroupoid X ‚•§ Pointed where
  obj x‚ÇÄ := Pointed.of (default : œÄ_ n X x‚ÇÄ.as)
  map {x‚ÇÄ x‚ÇÅ} p :=
    { toFun := HomotopyGroup.changeBasePt n (Quotient.out p)
      map_point := Quotient.sound GenLoop.ChangeBasePt.apply_const }
  map_id x‚ÇÄ := by
    dsimp only
    congr 1
    ext f
    rw [id_eq]
    change HomotopyGroup.changeBasePt n ‚ü¶Path.refl x‚ÇÄ.as‚üß.out _ = _
    rw [‚Üê Quotient.out_eq f]
    unfold HomotopyGroup.changeBasePt
    rw [Quotient.map_mk]
    apply Eq.symm
    apply Quotient.eq_iff_equiv.mpr
    apply GenLoop.ChangeBasePt.along_null_path  -- the key
    change (Path.Homotopic.setoid _ _) _ _
    apply Quotient.mk_out
  map_comp {x‚ÇÄ x‚ÇÅ x‚ÇÇ} p q := by
    dsimp only
    congr 1
    ext f
    dsimp only [Function.comp_apply]
    rw [‚Üê Quotient.out_eq f]
    unfold HomotopyGroup.changeBasePt
    iterate 3 (rw [Quotient.map_mk])
    apply Eq.symm
    apply Quotient.eq_iff_equiv.mpr
    apply GenLoop.ChangeBasePt.trans'  -- the key
    change (Path.Homotopic.Quotient.comp _ _).out.Homotopic _
    unfold Path.Homotopic.Quotient.comp
    conv_lhs => pattern p; rw [‚Üê Quotient.out_eq p]
    conv_lhs => pattern q; rw [‚Üê Quotient.out_eq q]
    rw [Quotient.map‚ÇÇ_mk]
    change (Path.Homotopic.setoid _ _) _ _
    apply Quotient.mk_out

instance FundamentalGroupoid.isIso_changeBasePt_map
    {x‚ÇÄ x‚ÇÅ : FundamentalGroupoid X} (p : x‚ÇÄ ‚ü∂ x‚ÇÅ) :
    CategoryTheory.IsIso ((FundamentalGroupoid.changeBasePt n).map p) := by
  -- have : CategoryTheory.IsIso p := by infer_instance  -- CategoryTheory.IsIso.of_groupoid
  infer_instance



namespace HomotopyGroup

open CategoryTheory
open scoped ContinuousMap  -- notation `‚âÉ‚Çï`

/-- If `p` and `q` are homotopic paths (rel endpoints), then `p#` and `q#` are equal
as maps from `œÄ_ n X x‚ÇÄ` to `œÄ_ n X x‚ÇÅ`.
See also `GenLoop.ChangeBasePt.homotopic_of_path_homotopic`. -/
lemma changeBasePt_eq_of_path_homotopic
    {p q : Path x‚ÇÄ x‚ÇÅ} (pq : Path.Homotopic p q) :
    HomotopyGroup.changeBasePt n p = HomotopyGroup.changeBasePt n q := by
  ext f
  rw [‚Üê Quotient.out_eq f]
  apply Quotient.sound
  exact GenLoop.ChangeBasePt.homotopic_of_path_homotopic pq

/-- Change of base point along the path `p`,
as a morphism $F(¬∑, x‚ÇÄ)_{#} : œÄ_n(X, f(x‚ÇÄ)) ‚Üí œÄ_n(Y, g(x‚ÇÄ))$ in the category `Pointed` -/
noncomputable abbrev pointedHomOfPath (n : ‚Ñï) (p : Path x‚ÇÄ x‚ÇÅ) :
    Pointed.of (default : œÄ_ n X x‚ÇÄ) ‚ü∂ Pointed.of (default : œÄ_ n X x‚ÇÅ) where
  toFun := changeBasePt n p
  map_point := Quotient.sound GenLoop.ChangeBasePt.apply_const

instance isIso_pointedHomOfPath (n : ‚Ñï) (p : Path x‚ÇÄ x‚ÇÅ) :
    IsIso (pointedHomOfPath n p) := by
  have : (FundamentalGroupoid.changeBasePt n).map ‚ü¶p‚üß = (pointedHomOfPath n p) := by
    unfold FundamentalGroupoid.changeBasePt pointedHomOfPath
    dsimp
    congr 1
    apply HomotopyGroup.changeBasePt_eq_of_path_homotopic
    change (Path.Homotopic.setoid _ _) _ _
    apply Quotient.mk_out
  rw [‚Üê this]
  infer_instance  -- FundamentalGroupoid.isIso_changeBasePt_map

lemma bijective_changeBasePt (n : ‚Ñï) (p : Path x‚ÇÄ x‚ÇÅ) :
    Function.Bijective (changeBasePt n p) := by
  rw [(by rfl : changeBasePt n p = ConcreteCategory.hom (pointedHomOfPath n p))]
  apply (Pointed.isIso_iff_bijective _).mpr
  apply isIso_pointedHomOfPath

/-- `ChangeBasePt` commutes with the induced map:
```
œÄ_ n X x‚ÇÄ  ------ f* ---->  œÄ_ n Y (f x‚ÇÄ)
    |                            |
    p#                        (f ‚àò p)#
    |                            |
    v                            v
œÄ_ n X x‚ÇÅ  ------ f* ---->  œÄ_ n Y (f x‚ÇÅ)
```
See also `GenLoop.map_changeBasePt_homotopic_changeBasePt_map`. -/
lemma pointedHomOfPath_inducedPointedHom_eq_inducedPointedHom_pointedHomOfPath
    (n : ‚Ñï) (p : Path x‚ÇÄ x‚ÇÅ) (f : C(X, Y)) :
    pointedHomOfPath n p ‚â´ inducedPointedHom n x‚ÇÅ f =
    inducedPointedHom n x‚ÇÄ f ‚â´ pointedHomOfPath n (p.map f.continuous) := by
  ext Œ±
  rw [‚Üê Quotient.out_eq Œ±]
  apply Quotient.sound
  exact GenLoop.map_changeBasePt_homotopic_changeBasePt_map f

lemma inducedPointedHom_eq_of_path
    (n : ‚Ñï) (p : Path x‚ÇÄ x‚ÇÅ) (f : C(X, Y)) :
    inducedPointedHom n x‚ÇÄ f = pointedHomOfPath n p ‚â´ inducedPointedHom n x‚ÇÅ f ‚â´
      inv (pointedHomOfPath n (p.map f.continuous)) := by
  rw [‚Üê Category.assoc, pointedHomOfPath_inducedPointedHom_eq_inducedPointedHom_pointedHomOfPath]
  rw [Category.assoc, IsIso.hom_inv_id, Category.comp_id]

theorem inducedPointedHom_comp_pointedHomOfHomotopy_eq
    (n : ‚Ñï) (x‚ÇÄ : X) {f g : C(X, X)} (F : f.Homotopy g) :
    inducedPointedHom n x‚ÇÄ f ‚â´ pointedHomOfPath n (F.evalAt x‚ÇÄ) =
    inducedPointedHom n x‚ÇÄ g := by
  ext Œ±
  dsimp only at Œ±
  dsimp only [inducedPointedHom, pointedHomOfPath, functorToPointed]
  change changeBasePt n (F.evalAt x‚ÇÄ) ((functorToType n).map (PointedTopCat.ofHom f x‚ÇÄ) Œ±) =
    (functorToType n).map (PointedTopCat.ofHom g x‚ÇÄ) Œ±
  simp only [functorToType, CategoryTheory.Under.mk_right]
  rw [‚Üê Quotient.out_eq Œ±]
  apply Quotient.sound
  simp only [inducedMap', CategoryTheory.Under.mk_right, CategoryTheory.Under.homMk_right,
    TopCat.hom_ofHom]
  generalize_proofs fŒ±_mem gŒ±_mem
  let fŒ± : Œ©^ (Fin n) X (f x‚ÇÄ) := ‚ü®f.comp Œ±.out, fŒ±_mem‚ü©
  let gŒ± : Œ©^ (Fin n) X (g x‚ÇÄ) := ‚ü®g.comp Œ±.out, gŒ±_mem‚ü©
  have L : GenLoop.LevelHomotopy fŒ± gŒ± (F.evalAt x‚ÇÄ) :=  -- (t, y) ‚Ü¶ F(t, Œ±(y))
    { toContinuousMap := F.toContinuousMap.comp <| (ContinuousMap.id _).prodMap Œ±.out
      map_zero_left y := by simp [fŒ±]
      map_one_left y := by simp [gŒ±]
      prop' t y hy := by
        simp [ContinuousMap.Homotopy.evalAt]
        rw [Œ±.out.prop y hy] }
  apply GenLoop.homotopic_of_levelHomotopy_along_homotopic_paths (F.evalAt x‚ÇÄ #~ fŒ±) L
  exact Path.Homotopic.refl _

lemma injective_toFun_surjective_invFun_of_homotopyEquiv (n : ‚Ñï) (x‚ÇÄ : X) (E : X ‚âÉ‚Çï Y) :
    Function.Injective (inducedPointedHom n x‚ÇÄ E.toFun).toFun ‚àß
    Function.Surjective (inducedPointedHom n (E.toFun x‚ÇÄ) E.invFun).toFun := by
  have gf_ch_eq_id := inducedPointedHom_comp_pointedHomOfHomotopy_eq n x‚ÇÄ E.left_inv.some
  have bgf : Function.Bijective (inducedPointedHom n x‚ÇÄ (E.invFun.comp E.toFun)) := by
    apply (isIso_iff_bijective _).mp
    have iso_gf : IsIso (inducedPointedHom n x‚ÇÄ (E.invFun.comp E.toFun)) :=
      IsIso.of_isIso_fac_right gf_ch_eq_id  -- using `isIso_inducedPointedHom_id`
    infer_instance  -- using `iso_gf` and `CategoryTheory.hom_isIso`
  have : inducedPointedHom n x‚ÇÄ (E.invFun.comp E.toFun) =
      inducedPointedHom n _ E.toFun ‚â´ inducedPointedHom n _ E.invFun :=
    inducedPointedHom_comp x‚ÇÄ E.toFun E.invFun
  have : (inducedPointedHom n x‚ÇÄ (E.invFun.comp E.toFun)).toFun =
      (inducedPointedHom n _ E.invFun).toFun ‚àò (inducedPointedHom n _ E.toFun).toFun := by
    rw [this]
    simp only [ContinuousMap.comp_apply, ContinuousMap.HomotopyEquiv.toFun_eq_coe,
      ContinuousMap.HomotopyEquiv.coe_invFun, Pointed.Hom.comp_toFun']
  replace bgf : Function.Bijective (inducedPointedHom n x‚ÇÄ (E.invFun.comp E.toFun)).toFun := bgf
  replace bgf : Function.Bijective <|
      (inducedPointedHom n _ E.invFun).toFun ‚àò (inducedPointedHom n x‚ÇÄ E.toFun).toFun := by
    rw [‚Üê this]
    exact bgf
  exact ‚ü®Function.Injective.of_comp bgf.injective, Function.Surjective.of_comp bgf.surjective‚ü©

theorem isIso_inducedPointedHom_of_isHomotopyEquiv (n : ‚Ñï) (x‚ÇÄ : X) (f : C(X, Y))
    (hf : IsHomotopyEquiv f) : IsIso (inducedPointedHom n x‚ÇÄ f) := by
  obtain ‚ü®E, Ef‚ü© := hf
  -- have : f = E.toFun := Ef.symm
  -- let g := E.invFun
  have inj_f : Function.Injective (inducedPointedHom n x‚ÇÄ f).toFun := by
    rw [‚Üê Ef]
    exact (injective_toFun_surjective_invFun_of_homotopyEquiv n x‚ÇÄ E).left
  have surj_f : Function.Surjective (inducedPointedHom n x‚ÇÄ f).toFun := by
    -- In general, `g (f x‚ÇÄ) ‚â† x‚ÇÄ`, hence `inducedPointedHom_eq_of_path` is necessary.
    rw [‚Üê Ef]
    have surj := injective_toFun_surjective_invFun_of_homotopyEquiv n
        (E.symm.invFun x‚ÇÄ) E.symm |>.right
    rw [(by rfl : E.symm.invFun = E.toFun)] at surj
    rw [inducedPointedHom_eq_of_path n (E.left_inv.some.evalAt x‚ÇÄ) E.toFun] at surj
    have {A B C D : Type u} {f : A ‚Üí B} {g : B ‚Üí C} {h : C ‚Üí D}
        (shgf : Function.Surjective (h ‚àò g ‚àò f))
        (bh : Function.Bijective h) (bf : Function.Bijective f) : Function.Surjective g :=
      Function.Surjective.of_comp <| (Function.Surjective.of_comp_iff' bh (g ‚àò f)).mp shgf
    refine this surj ?_ ?_
    ¬∑ apply (Pointed.isIso_iff_bijective _).mpr
      infer_instance
    ¬∑ apply bijective_changeBasePt
  exact (Pointed.isIso_iff_bijective _).mp ‚ü®inj_f, surj_f‚ü©

end HomotopyGroup
