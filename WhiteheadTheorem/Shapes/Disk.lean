import Mathlib.Topology.Category.TopCat.Limits.Basic
import Mathlib.Analysis.InnerProductSpace.PiL2


namespace TopCat

/-- The `n`-disk is the set of points in ‚Ñù‚Åø whose norm is at most `1`,
endowed with the subspace topology. -/
noncomputable def disk (n : ‚Ñï) : TopCat.{u} :=
  TopCat.of <| ULift <| Metric.closedBall (0 : EuclideanSpace ‚Ñù (Fin n)) 1

/-- The boundary of the `n`-disk. -/
noncomputable def diskBoundary (n : ‚Ñï) : TopCat.{u} :=
  TopCat.of <| ULift <| Metric.sphere (0 : EuclideanSpace ‚Ñù (Fin n)) 1

/-- The `n`-sphere is the set of points in ‚Ñù‚Åø‚Å∫¬π whose norm equals `1`,
endowed with the subspace topology. -/
noncomputable def sphere (n : ‚Ñï) : TopCat.{u} :=
  diskBoundary (n + 1)

/-- `ùîª n` denotes the `n`-disk. -/
scoped prefix:arg "ùîª " => disk

/-- `‚àÇùîª n` denotes the boundary of the `n`-disk. -/
scoped prefix:arg "‚àÇùîª " => diskBoundary

/-- `ùïä n` denotes the `n`-sphere. -/
scoped prefix:arg "ùïä " => sphere

/-- The inclusion `‚àÇùîª n ‚ü∂ ùîª n` of the boundary of the `n`-disk. -/
def diskBoundaryInclusion (n : ‚Ñï) : diskBoundary.{u} n ‚ü∂ disk.{u} n :=
  ofHom
    { toFun := fun ‚ü®p, hp‚ü© ‚Ü¶ ‚ü®p, le_of_eq hp‚ü©
      continuous_toFun := ‚ü®fun t ‚ü®s, ‚ü®r, hro, hrs‚ü©, hst‚ü© ‚Ü¶ by
        rw [isOpen_induced_iff, ‚Üê hst, ‚Üê hrs]
        tauto‚ü© }

instance isEmpty_diskBoundary_zero : IsEmpty (diskBoundary.{u} 0) := by
  unfold diskBoundary
  simp_all only [isEmpty_ulift, Set.isEmpty_coe_sort]
  apply Set.subset_empty_iff.mp
  intro x hx
  have u : Unique <| EuclideanSpace ‚Ñù (Fin 0) := by infer_instance
  have x0' := (u.uniq x).trans (u.uniq 0).symm
  have x0 : ‚Äñx‚Äñ = 0 := by rw [x0', norm_zero]
  have x1 : ‚Äñx‚Äñ = 1 := by convert mem_sphere_iff_norm.mp hx; rw [sub_zero]
  have : (1 : ‚Ñù) = (0 : ‚Ñù) := x1.symm.trans x0
  exfalso
  exact (by norm_num : (1 : ‚Ñù) ‚â† (0 : ‚Ñù)) this

end TopCat
