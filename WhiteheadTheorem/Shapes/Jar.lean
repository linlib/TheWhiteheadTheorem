import WhiteheadTheorem.Auxiliary
import WhiteheadTheorem.Shapes.Disk
-- import Mathlib.CategoryTheory.Limits.Shapes.Pullback.Square
-- import Mathlib.CategoryTheory.LiftingProperties.Limits


-- open CategoryTheory
open TopCat
open scoped Topology unitInterval


namespace HEP

-- TODO (?): rewrite using Continuous.piecewise

abbrev Jar (n : ‚Ñï) := ùîª n √ó I

namespace Jar

def mid (n : ‚Ñï) := {‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, ‚ü®y, _‚ü© ‚ü© : Jar n | ‚Äñx‚Äñ ‚â§ 1 - y / 2}
def rim (n : ‚Ñï) := {‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, ‚ü®y, _‚ü© ‚ü© : Jar n | ‚Äñx‚Äñ ‚â• 1 - y / 2}

def closedCover (n : ‚Ñï) : Fin 2 ‚Üí Set (Jar n) := ![mid n, rim n]

lemma continuous_sub_div_two : Continuous fun (y : ‚Ñù) ‚Ü¶ 1 - y / 2 :=
  (continuous_sub_left _).comp <| continuous_mul_right _

lemma isClosed_mid (n : ‚Ñï) : IsClosed (mid n) :=
  continuous_iff_isClosed.mp (continuous_uliftDown.subtype_val.norm.prodMap continuous_id)
    {‚ü®x, y, _‚ü© : ‚Ñù √ó I | x ‚â§ 1 - y / 2} <| isClosed_le continuous_fst <|
    continuous_sub_div_two.comp <| continuous_subtype_val.comp continuous_snd

lemma isClosed_rim (n : ‚Ñï) : IsClosed (rim n) :=
  continuous_iff_isClosed.mp (continuous_uliftDown.subtype_val.norm.prodMap continuous_id)
    {‚ü®x, y, _‚ü© : ‚Ñù √ó I | x ‚â• 1 - y / 2} <| isClosed_le
    (continuous_sub_div_two.comp <| continuous_subtype_val.comp continuous_snd) continuous_fst

noncomputable def midProjToFun (n : ‚Ñï) : mid.{u} n ‚Üí disk.{u} n := fun p ‚Ü¶ ‚ü®{
  -- Note: pattern matching is done inside `toFun` to make `Continuous.subtype_mk` work
  val := match p with
    | ‚ü®‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, ‚ü®y, _‚ü© ‚ü©, _‚ü© => (2 / (2 - y)) ‚Ä¢ x,
  property := by
    obtain ‚ü®‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, ‚ü®y, _, _‚ü© ‚ü©, hxy‚ü© := p
    dsimp only [Int.ofNat_eq_coe, Set.coe_setOf, Set.mem_setOf_eq]
    rw [Metric.mem_closedBall]
    rw [dist_zero_right, norm_smul, norm_div, RCLike.norm_ofNat, Real.norm_eq_abs]
    have : 0 < |2 - y| := lt_of_le_of_ne (abs_nonneg _) (abs_ne_zero.mpr (by linarith)).symm
    rw [‚Üê le_div_iff‚ÇÄ' (div_pos (by norm_num) this), one_div, inv_div]
    nth_rw 2 [‚Üê (@abs_eq_self ‚Ñù _ 2).mpr (by norm_num)]
    rw [‚Üê abs_div, sub_div, div_self (by norm_num), le_abs]
    exact Or.inl hxy }‚ü©

lemma continuous_midProjToFun (n : ‚Ñï) : Continuous (midProjToFun.{u} n) := by
  refine continuous_uliftUp.comp ?_
  refine Continuous.subtype_mk ?_ _
  exact continuous_smul.comp <| Continuous.prodMk
    (continuous_const.div ((continuous_sub_left _).comp <| continuous_subtype_val.comp <|
      continuous_snd.comp <| continuous_subtype_val) fun ‚ü®‚ü® _, ‚ü®y, _, _‚ü© ‚ü©, _‚ü© ‚Ü¶ by
        dsimp only [Function.comp_apply, ne_eq]; linarith)
    (continuous_subtype_val.comp <| continuous_uliftDown.comp <| continuous_fst.comp <|
      continuous_subtype_val)

noncomputable def midProj (n : ‚Ñï) : C(mid n, ùîª n) :=
  ‚ü®midProjToFun n, continuous_midProjToFun n‚ü©

lemma rim_fst_ne_zero (n : ‚Ñï) : ‚àÄ p : rim n, ‚Äñp.val.fst.down.val‚Äñ ‚â† 0 :=
  fun ‚ü®‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, ‚ü®y, _, _‚ü© ‚ü©, hxy‚ü© ‚Ü¶ by
    conv => lhs; arg 1; dsimp
    change ‚Äñx‚Äñ ‚â• 1 - y / 2 at hxy
    linarith

noncomputable def rimProjFstToFun (n : ‚Ñï) : rim.{u} n ‚Üí diskBoundary.{u} n := fun p ‚Ü¶ ‚ü®{
  val := match p with
    | ‚ü®‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, _ ‚ü©, _‚ü© => (1 / ‚Äñx‚Äñ) ‚Ä¢ x
  property := by
    obtain ‚ü®‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, ‚ü®y, yl, yr‚ü© ‚ü©, hxy‚ü© := p
    simp only [one_div, mem_sphere_iff_norm, sub_zero, norm_smul, norm_inv, norm_norm]
    change ‚Äñx‚Äñ ‚â• 1 - y / 2 at hxy
    exact inv_mul_cancel‚ÇÄ (by linarith) }‚ü©

lemma continuous_rimProjFstToFun (n : ‚Ñï) : Continuous (rimProjFstToFun n) := by
  refine continuous_uliftUp.comp ?_
  refine Continuous.subtype_mk ?_ _
  exact continuous_smul.comp <| Continuous.prodMk
    (Continuous.div continuous_const (continuous_norm.comp <| continuous_subtype_val.comp <|
      continuous_uliftDown.comp <| continuous_fst.comp <| continuous_subtype_val) <|
        rim_fst_ne_zero n)
    (continuous_subtype_val.comp <| continuous_uliftDown.comp <| continuous_fst.comp <|
      continuous_subtype_val)

noncomputable def rimProjFst (n : ‚Ñï) : C(rim n, ‚àÇùîª n) :=
  ‚ü®rimProjFstToFun n, continuous_rimProjFstToFun n‚ü©

noncomputable def rimProjSndToFun (n : ‚Ñï) : rim n ‚Üí I := fun p ‚Ü¶ {
  val := match p with
    | ‚ü®‚ü® ‚ü®‚ü®x, _‚ü©‚ü©, ‚ü®y, _‚ü© ‚ü©, _‚ü© => (y - 2) / ‚Äñx‚Äñ + 2
  property := by
    obtain ‚ü®‚ü® ‚ü®‚ü®x, hx‚ü©‚ü©, ‚ü®y, _, _‚ü© ‚ü©, hxy‚ü© := p
    simp only [Set.mem_Icc]
    rw [Metric.mem_closedBall, dist_zero_right] at hx
    change ‚Äñx‚Äñ ‚â• 1 - y / 2 at hxy
    have : ‚Äñx‚Äñ > 0 := by linarith
    constructor
    all_goals rw [‚Üê add_le_add_iff_right (-2)]
    ¬∑ rw [‚Üê neg_le_neg_iff, add_neg_cancel_right, zero_add, neg_neg]
      rw [‚Üê neg_div, neg_sub, div_le_iff‚ÇÄ (by assumption)]; linarith
    ¬∑ rw [add_assoc, add_neg_cancel, add_zero, div_le_iff‚ÇÄ (by assumption)]; linarith}

lemma continuous_rimProjSndToFun (n : ‚Ñï) : Continuous (rimProjSndToFun n) := by
  refine Continuous.subtype_mk ?_ _
  exact (continuous_add_right _).comp <| Continuous.div
    ((continuous_sub_right _).comp <| continuous_subtype_val.comp <|
      continuous_snd.comp <| continuous_subtype_val)
    (continuous_norm.comp <| continuous_subtype_val.comp <| continuous_uliftDown.comp <|
      continuous_fst.comp <| continuous_subtype_val) <| rim_fst_ne_zero n

noncomputable def rimProjSnd (n : ‚Ñï) : C(rim n, I) :=
  ‚ü®rimProjSndToFun n, continuous_rimProjSndToFun n‚ü©

noncomputable def rimProj (n : ‚Ñï) : C(rim n, ‚àÇùîª n √ó I) :=
  ContinuousMap.prodMk (rimProjFst n) (rimProjSnd n)

noncomputable def proj (n : ‚Ñï) {Y : Type*} [TopologicalSpace Y]
    (f : C(ùîª n, Y)) (H: C(‚àÇùîª n √ó I, Y)) : ‚àÄ i, C(closedCover n i, Y) :=
  Fin.cons (f.comp (midProj n)) <| Fin.cons (H.comp (rimProj n)) finZeroElim

lemma proj_compatible (n : ‚Ñï) {Y : Type*} [TopologicalSpace Y]
    (f : C(ùîª n, Y)) (H: C(‚àÇùîª n √ó I, Y)) (hf: f ‚àò diskBoundaryInclusion n = H ‚àò (¬∑, 0)) :
    ‚àÄ (p : Jar n) (hp0 : p ‚àà closedCover n 0) (hp1 : p ‚àà closedCover n 1),
    proj n f H 0 ‚ü®p, hp0‚ü© = proj n f H 1 ‚ü®p, hp1‚ü© :=
  fun ‚ü®‚ü®‚ü®x, hx‚ü©‚ü©, ‚ü®y, hy0, hy1‚ü©‚ü© hp0 hp1 ‚Ü¶ by
    change f (midProj n _) = H (rimProj n _)
    change ‚Äñx‚Äñ ‚â§ 1 - y / 2 at hp0
    change ‚Äñx‚Äñ ‚â• 1 - y / 2 at hp1
    have : ‚Äñx‚Äñ = 1 - y / 2 := by linarith
    let q : ‚àÇùîª n := ‚ü® (2 / (2 - y)) ‚Ä¢ x, by
      simp only [mem_sphere_iff_norm, sub_zero, norm_smul, norm_div, RCLike.norm_ofNat,
        Real.norm_eq_abs]
      rw [this, abs_of_pos (by linarith), div_mul_eq_mul_div, div_eq_iff (by linarith)]
      rw [mul_sub, mul_one, ‚Üê mul_comm_div, div_self (by norm_num), one_mul, one_mul] ‚ü©
    conv in midProj n _ => equals diskBoundaryInclusion n q =>
      unfold diskBoundaryInclusion midProj midProjToFun
      simp only [Fin.isValue, ContinuousMap.coe_mk, hom_ofHom]
      congr
    conv in rimProj n _ => equals (q, 0) =>
      unfold rimProj rimProjFst rimProjFstToFun rimProjSnd rimProjSndToFun
      dsimp only [Int.ofNat_eq_coe, ContinuousMap.prod_eval, ContinuousMap.coe_mk]
      conv => rhs; change (q, ‚ü®0, by norm_num, by norm_num‚ü©)
      congr 2
      ¬∑ congr 2
        rw [this, div_eq_div_iff (by linarith) (by linarith)]
        rw [one_mul, mul_sub, mul_one, ‚Üê mul_comm_div, div_self (by norm_num), one_mul]
      ¬∑ rw [this, ‚Üê eq_sub_iff_add_eq, zero_sub, div_eq_iff (by linarith), mul_sub, mul_one]
        rw [mul_div, mul_div_right_comm, neg_div_self (by norm_num), ‚Üê neg_eq_neg_one_mul]
        rw [sub_neg_eq_add, add_comm]; rfl
    change (f ‚àò diskBoundaryInclusion n) q = (H ‚àò (¬∑, 0)) q
    rw [hf]

lemma proj_compatible' (n : ‚Ñï) {Y : Type*} [TopologicalSpace Y]
    (f : C(ùîª n, Y)) (H: C(‚àÇùîª n √ó I, Y)) (hf: f ‚àò diskBoundaryInclusion n = H ‚àò (¬∑, 0)) :
    ‚àÄ (i j) (p : Jar n) (hpi : p ‚àà closedCover n i) (hpj : p ‚àà closedCover n j),
    proj n f H i ‚ü®p, hpi‚ü© = proj n f H j ‚ü®p, hpj‚ü© := by
  intro ‚ü®i, hi‚ü© ‚ü®j, hj‚ü© p hpi hpj
  interval_cases i <;> (interval_cases j <;> (try simp only [Fin.zero_eta, Fin.mk_one]))
  ¬∑ exact proj_compatible n f H hf p hpi hpj
  ¬∑ exact Eq.symm <| proj_compatible n f H hf p hpj hpi

lemma closedCover_is_cover (n : ‚Ñï) : ‚àÄ (p : Jar n), ‚àÉ i, p ‚àà closedCover n i :=
  fun ‚ü®‚ü®x, _‚ü©, ‚ü®y, _‚ü©‚ü© ‚Ü¶ by
    by_cases h : ‚Äñx‚Äñ ‚â§ 1 - y / 2
    ¬∑ use 0; exact h
    ¬∑ use 1; change ‚Äñx‚Äñ ‚â• 1 - y / 2; linarith

lemma closedCover_isClosed (n : ‚Ñï) : ‚àÄ i, IsClosed (closedCover n i) := fun ‚ü®i, hi‚ü© ‚Ü¶ by
  interval_cases i
  exacts [isClosed_mid n, isClosed_rim n]

noncomputable def homotopyExtension (n : ‚Ñï) {Y : Type*} [TopologicalSpace Y]
    (f : C(ùîª n, Y)) (H: C(‚àÇùîª n √ó I, Y))
    (hf: f ‚àò diskBoundaryInclusion n = H ‚àò (¬∑, 0)) : C(Jar n, Y) :=
  ContinuousMap.liftCoverClosed (closedCover n) (proj n f H) (proj_compatible' n f H hf)
    (closedCover_is_cover n) (closedCover_isClosed n)

-- The triangle involving the bottom (i.e., `ùîª (n + 1)`) of the jar commutes.
lemma homotopyExtension_bottom_commutes (n : ‚Ñï) {Y : Type*} [TopologicalSpace Y]
    (f : C(ùîª n, Y)) (H: C(‚àÇùîª n √ó I, Y)) (hf: f ‚àò diskBoundaryInclusion n = H ‚àò (¬∑, 0)) :
    ‚áëf = homotopyExtension n f H hf ‚àò (¬∑, 0) := by
  ext p
  change _ = homotopyExtension n f H hf (p, 0)
  have hp : (p, 0) ‚àà closedCover n 0 := by
    obtain ‚ü®x, hx‚ü© := p
    change ‚Äñx‚Äñ ‚â§ 1 - 0 / 2
    rw [zero_div, sub_zero]
    exact mem_closedBall_zero_iff.mp hx
  conv_rhs => equals (proj n f H 0) ‚ü®(p, 0), hp‚ü© => apply ContinuousMap.liftCoverClosed_coe'
  simp only [Int.ofNat_eq_coe, proj, TopCat.coe_of, Fin.succ_zero_eq_one, Fin.cons_zero,
    ContinuousMap.comp_apply]
  congr
  change p = midProjToFun n ‚ü®(p, 0), hp‚ü©
  obtain ‚ü®x, hx‚ü© := p
  simp only [Int.ofNat_eq_coe, midProjToFun, sub_zero, ne_eq, OfNat.ofNat_ne_zero,
    not_false_eq_true, div_self, one_smul]

-- The triangle involving the wall (i.e., `ùïä n √ó I`) of the jar commutes.
lemma homotopyExtension_wall_commutes (n : ‚Ñï) {Y : Type*} [TopologicalSpace Y]
    (f : C(ùîª n, Y)) (H: C(‚àÇùîª n √ó I, Y)) (hf: f ‚àò diskBoundaryInclusion n = H ‚àò (¬∑, 0)) :
    ‚áëH = homotopyExtension n f H hf ‚àò Prod.map (diskBoundaryInclusion n) id := by
  ext ‚ü®‚ü®x, hx‚ü©, ‚ü®y, hy‚ü©‚ü©
  let q := diskBoundaryInclusion n ‚ü®x, hx‚ü©
  change _ = homotopyExtension n f H hf ‚ü®q, ‚ü®y, hy‚ü©‚ü©
  have hq : ‚ü®q, ‚ü®y, hy‚ü©‚ü© ‚àà closedCover n 1 := by
    change ‚Äñx‚Äñ ‚â• 1 - y / 2
    rw [mem_sphere_zero_iff_norm.mp hx]
    obtain ‚ü®_, _‚ü© := hy
    linarith
  conv_rhs => equals (proj n f H 1) ‚ü®‚ü®q, ‚ü®y, hy‚ü©‚ü©, hq‚ü© => apply ContinuousMap.liftCoverClosed_coe'
  simp only [proj, Fin.succ_zero_eq_one, Fin.cons_one, Fin.cons_zero, ContinuousMap.comp_apply]
  congr
  ¬∑ dsimp only [rimProjFst, diskBoundaryInclusion, ContinuousMap.coe_mk, rimProjFstToFun, one_div,
      q]
    rw [mem_sphere_zero_iff_norm.mp hx, div_one, one_smul]
  ¬∑ dsimp only [diskBoundaryInclusion, q]
    rw [mem_sphere_zero_iff_norm.mp hx, div_one, sub_add_cancel]

-- def HomotopyExtensionProperty {A X : Type u} [TopologicalSpace A] [TopologicalSpace X]
--     (i : C(A, X)) : Prop :=
--   ‚àÄ {Y : Type} [TopologicalSpace Y] (f : C(X, Y)) (H : C(A √ó I, Y)), f ‚àò i = H ‚àò (¬∑, 0) ‚Üí
--   ‚àÉ H' : C(X √ó I, Y), ‚áëf = ‚áëH' ‚àò (¬∑, 0) ‚àß ‚áëH = ‚áëH' ‚àò Prod.map i id

-- theorem hep_sphereInclusion (n : ‚Ñï) : HomotopyExtensionProperty (diskBoundaryInclusion.{u} n).hom :=
--   fun f H hf ‚Ü¶ ‚ü®jarHomotopyExtension n f H hf, jarHomotopyExtension_bottom_commutes n f H hf,
--     jarHomotopyExtension_wall_commutes n f H hf‚ü©

end Jar

end HEP
